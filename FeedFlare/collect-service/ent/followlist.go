// Code generated by ent, DO NOT EDIT.

package ent

import (
	"feedflare/ent/followlist"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// FollowList is the model entity for the FollowList schema.
type FollowList struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// XMLVersion holds the value of the "xml_version" field.
	XMLVersion int8 `json:"xml_version,omitempty"`
	// RssVersion holds the value of the "rss_version" field.
	RssVersion int8 `json:"rss_version,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// Links holds the value of the "links" field.
	Links string `json:"links,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// DtCreated holds the value of the "dt_created" field.
	DtCreated time.Time `json:"dt_created,omitempty"`
	// DtUpdated holds the value of the "dt_updated" field.
	DtUpdated time.Time `json:"dt_updated,omitempty"`
	// FeedCategory holds the value of the "feed_category" field.
	FeedCategory int `json:"feed_category,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// IsFavorite holds the value of the "is_favorite" field.
	IsFavorite bool `json:"is_favorite,omitempty"`
	// IsRead holds the value of the "is_read" field.
	IsRead bool `json:"is_read,omitempty"`
	// IsUpdated holds the value of the "is_updated" field.
	IsUpdated bool `json:"is_updated,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FollowList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case followlist.FieldIsActive, followlist.FieldIsFavorite, followlist.FieldIsRead, followlist.FieldIsUpdated:
			values[i] = new(sql.NullBool)
		case followlist.FieldID, followlist.FieldXMLVersion, followlist.FieldRssVersion, followlist.FieldFeedCategory:
			values[i] = new(sql.NullInt64)
		case followlist.FieldURL, followlist.FieldTitle, followlist.FieldDescription, followlist.FieldLink, followlist.FieldLinks, followlist.FieldLanguage:
			values[i] = new(sql.NullString)
		case followlist.FieldDtCreated, followlist.FieldDtUpdated:
			values[i] = new(sql.NullTime)
		case followlist.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FollowList", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FollowList fields.
func (fl *FollowList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case followlist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fl.ID = int(value.Int64)
		case followlist.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				fl.UUID = *value
			}
		case followlist.FieldXMLVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field xml_version", values[i])
			} else if value.Valid {
				fl.XMLVersion = int8(value.Int64)
			}
		case followlist.FieldRssVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rss_version", values[i])
			} else if value.Valid {
				fl.RssVersion = int8(value.Int64)
			}
		case followlist.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				fl.URL = value.String
			}
		case followlist.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				fl.Title = value.String
			}
		case followlist.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				fl.Description = value.String
			}
		case followlist.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				fl.Link = value.String
			}
		case followlist.FieldLinks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field links", values[i])
			} else if value.Valid {
				fl.Links = value.String
			}
		case followlist.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				fl.Language = value.String
			}
		case followlist.FieldDtCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dt_created", values[i])
			} else if value.Valid {
				fl.DtCreated = value.Time
			}
		case followlist.FieldDtUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dt_updated", values[i])
			} else if value.Valid {
				fl.DtUpdated = value.Time
			}
		case followlist.FieldFeedCategory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feed_category", values[i])
			} else if value.Valid {
				fl.FeedCategory = int(value.Int64)
			}
		case followlist.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				fl.IsActive = value.Bool
			}
		case followlist.FieldIsFavorite:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_favorite", values[i])
			} else if value.Valid {
				fl.IsFavorite = value.Bool
			}
		case followlist.FieldIsRead:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_read", values[i])
			} else if value.Valid {
				fl.IsRead = value.Bool
			}
		case followlist.FieldIsUpdated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_updated", values[i])
			} else if value.Valid {
				fl.IsUpdated = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FollowList.
// Note that you need to call FollowList.Unwrap() before calling this method if this FollowList
// was returned from a transaction, and the transaction was committed or rolled back.
func (fl *FollowList) Update() *FollowListUpdateOne {
	return (&FollowListClient{config: fl.config}).UpdateOne(fl)
}

// Unwrap unwraps the FollowList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fl *FollowList) Unwrap() *FollowList {
	_tx, ok := fl.config.driver.(*txDriver)
	if !ok {
		panic("ent: FollowList is not a transactional entity")
	}
	fl.config.driver = _tx.drv
	return fl
}

// String implements the fmt.Stringer.
func (fl *FollowList) String() string {
	var builder strings.Builder
	builder.WriteString("FollowList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fl.ID))
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", fl.UUID))
	builder.WriteString(", ")
	builder.WriteString("xml_version=")
	builder.WriteString(fmt.Sprintf("%v", fl.XMLVersion))
	builder.WriteString(", ")
	builder.WriteString("rss_version=")
	builder.WriteString(fmt.Sprintf("%v", fl.RssVersion))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(fl.URL)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(fl.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fl.Description)
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(fl.Link)
	builder.WriteString(", ")
	builder.WriteString("links=")
	builder.WriteString(fl.Links)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(fl.Language)
	builder.WriteString(", ")
	builder.WriteString("dt_created=")
	builder.WriteString(fl.DtCreated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("dt_updated=")
	builder.WriteString(fl.DtUpdated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("feed_category=")
	builder.WriteString(fmt.Sprintf("%v", fl.FeedCategory))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", fl.IsActive))
	builder.WriteString(", ")
	builder.WriteString("is_favorite=")
	builder.WriteString(fmt.Sprintf("%v", fl.IsFavorite))
	builder.WriteString(", ")
	builder.WriteString("is_read=")
	builder.WriteString(fmt.Sprintf("%v", fl.IsRead))
	builder.WriteString(", ")
	builder.WriteString("is_updated=")
	builder.WriteString(fmt.Sprintf("%v", fl.IsUpdated))
	builder.WriteByte(')')
	return builder.String()
}

// FollowLists is a parsable slice of FollowList.
type FollowLists []*FollowList

func (fl FollowLists) config(cfg config) {
	for _i := range fl {
		fl[_i].config = cfg
	}
}
