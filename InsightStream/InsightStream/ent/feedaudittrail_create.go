// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"insightstream/ent/feedaudittrail"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeedAuditTrailCreate is the builder for creating a FeedAuditTrail entity.
type FeedAuditTrailCreate struct {
	config
	mutation *FeedAuditTrailMutation
	hooks    []Hook
}

// SetUpdatedAt sets the "updated_at" field.
func (fatc *FeedAuditTrailCreate) SetUpdatedAt(t time.Time) *FeedAuditTrailCreate {
	fatc.mutation.SetUpdatedAt(t)
	return fatc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fatc *FeedAuditTrailCreate) SetNillableUpdatedAt(t *time.Time) *FeedAuditTrailCreate {
	if t != nil {
		fatc.SetUpdatedAt(*t)
	}
	return fatc
}

// SetAction sets the "action" field.
func (fatc *FeedAuditTrailCreate) SetAction(s string) *FeedAuditTrailCreate {
	fatc.mutation.SetAction(s)
	return fatc
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (fatc *FeedAuditTrailCreate) SetNillableAction(s *string) *FeedAuditTrailCreate {
	if s != nil {
		fatc.SetAction(*s)
	}
	return fatc
}

// SetID sets the "id" field.
func (fatc *FeedAuditTrailCreate) SetID(i int) *FeedAuditTrailCreate {
	fatc.mutation.SetID(i)
	return fatc
}

// Mutation returns the FeedAuditTrailMutation object of the builder.
func (fatc *FeedAuditTrailCreate) Mutation() *FeedAuditTrailMutation {
	return fatc.mutation
}

// Save creates the FeedAuditTrail in the database.
func (fatc *FeedAuditTrailCreate) Save(ctx context.Context) (*FeedAuditTrail, error) {
	fatc.defaults()
	return withHooks[*FeedAuditTrail, FeedAuditTrailMutation](ctx, fatc.sqlSave, fatc.mutation, fatc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fatc *FeedAuditTrailCreate) SaveX(ctx context.Context) *FeedAuditTrail {
	v, err := fatc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fatc *FeedAuditTrailCreate) Exec(ctx context.Context) error {
	_, err := fatc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fatc *FeedAuditTrailCreate) ExecX(ctx context.Context) {
	if err := fatc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fatc *FeedAuditTrailCreate) defaults() {
	if _, ok := fatc.mutation.UpdatedAt(); !ok {
		v := feedaudittrail.DefaultUpdatedAt()
		fatc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fatc.mutation.Action(); !ok {
		v := feedaudittrail.DefaultAction
		fatc.mutation.SetAction(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fatc *FeedAuditTrailCreate) check() error {
	if _, ok := fatc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FeedAuditTrail.updated_at"`)}
	}
	if _, ok := fatc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "FeedAuditTrail.action"`)}
	}
	if v, ok := fatc.mutation.Action(); ok {
		if err := feedaudittrail.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "FeedAuditTrail.action": %w`, err)}
		}
	}
	return nil
}

func (fatc *FeedAuditTrailCreate) sqlSave(ctx context.Context) (*FeedAuditTrail, error) {
	if err := fatc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fatc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fatc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	fatc.mutation.id = &_node.ID
	fatc.mutation.done = true
	return _node, nil
}

func (fatc *FeedAuditTrailCreate) createSpec() (*FeedAuditTrail, *sqlgraph.CreateSpec) {
	var (
		_node = &FeedAuditTrail{config: fatc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: feedaudittrail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: feedaudittrail.FieldID,
			},
		}
	)
	if id, ok := fatc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fatc.mutation.UpdatedAt(); ok {
		_spec.SetField(feedaudittrail.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fatc.mutation.Action(); ok {
		_spec.SetField(feedaudittrail.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	return _node, _spec
}

// FeedAuditTrailCreateBulk is the builder for creating many FeedAuditTrail entities in bulk.
type FeedAuditTrailCreateBulk struct {
	config
	builders []*FeedAuditTrailCreate
}

// Save creates the FeedAuditTrail entities in the database.
func (fatcb *FeedAuditTrailCreateBulk) Save(ctx context.Context) ([]*FeedAuditTrail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fatcb.builders))
	nodes := make([]*FeedAuditTrail, len(fatcb.builders))
	mutators := make([]Mutator, len(fatcb.builders))
	for i := range fatcb.builders {
		func(i int, root context.Context) {
			builder := fatcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeedAuditTrailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fatcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fatcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fatcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fatcb *FeedAuditTrailCreateBulk) SaveX(ctx context.Context) []*FeedAuditTrail {
	v, err := fatcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fatcb *FeedAuditTrailCreateBulk) Exec(ctx context.Context) error {
	_, err := fatcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fatcb *FeedAuditTrailCreateBulk) ExecX(ctx context.Context) {
	if err := fatcb.Exec(ctx); err != nil {
		panic(err)
	}
}
