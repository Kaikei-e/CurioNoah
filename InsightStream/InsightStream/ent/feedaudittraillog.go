// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"insightstream/ent/feedaudittrailaction"
	"insightstream/ent/feedaudittraillog"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FeedAuditTrailLog is the model entity for the FeedAuditTrailLog schema.
type FeedAuditTrailLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeedAuditTrailLogQuery when eager-loading is set.
	Edges        FeedAuditTrailLogEdges `json:"edges"`
	action_id    *int
	selectValues sql.SelectValues
}

// FeedAuditTrailLogEdges holds the relations/edges for other nodes in the graph.
type FeedAuditTrailLogEdges struct {
	// Action holds the value of the action edge.
	Action *FeedAuditTrailAction `json:"action,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ActionOrErr returns the Action value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeedAuditTrailLogEdges) ActionOrErr() (*FeedAuditTrailAction, error) {
	if e.Action != nil {
		return e.Action, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: feedaudittrailaction.Label}
	}
	return nil, &NotLoadedError{edge: "action"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeedAuditTrailLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feedaudittraillog.FieldID:
			values[i] = new(sql.NullInt64)
		case feedaudittraillog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case feedaudittraillog.ForeignKeys[0]: // action_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeedAuditTrailLog fields.
func (fatl *FeedAuditTrailLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feedaudittraillog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fatl.ID = int(value.Int64)
		case feedaudittraillog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fatl.UpdatedAt = value.Time
			}
		case feedaudittraillog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field action_id", value)
			} else if value.Valid {
				fatl.action_id = new(int)
				*fatl.action_id = int(value.Int64)
			}
		default:
			fatl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FeedAuditTrailLog.
// This includes values selected through modifiers, order, etc.
func (fatl *FeedAuditTrailLog) Value(name string) (ent.Value, error) {
	return fatl.selectValues.Get(name)
}

// QueryAction queries the "action" edge of the FeedAuditTrailLog entity.
func (fatl *FeedAuditTrailLog) QueryAction() *FeedAuditTrailActionQuery {
	return NewFeedAuditTrailLogClient(fatl.config).QueryAction(fatl)
}

// Update returns a builder for updating this FeedAuditTrailLog.
// Note that you need to call FeedAuditTrailLog.Unwrap() before calling this method if this FeedAuditTrailLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (fatl *FeedAuditTrailLog) Update() *FeedAuditTrailLogUpdateOne {
	return NewFeedAuditTrailLogClient(fatl.config).UpdateOne(fatl)
}

// Unwrap unwraps the FeedAuditTrailLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fatl *FeedAuditTrailLog) Unwrap() *FeedAuditTrailLog {
	_tx, ok := fatl.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeedAuditTrailLog is not a transactional entity")
	}
	fatl.config.driver = _tx.drv
	return fatl
}

// String implements the fmt.Stringer.
func (fatl *FeedAuditTrailLog) String() string {
	var builder strings.Builder
	builder.WriteString("FeedAuditTrailLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fatl.ID))
	builder.WriteString("updated_at=")
	builder.WriteString(fatl.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FeedAuditTrailLogs is a parsable slice of FeedAuditTrailLog.
type FeedAuditTrailLogs []*FeedAuditTrailLog
