// Code generated by ent, DO NOT EDIT.

package feedaudittrail

import (
	"insightstream/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldLTE(FieldID, id))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldEQ(FieldUpdatedAt, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldEQ(FieldAction, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldLTE(FieldUpdatedAt, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldHasSuffix(FieldAction, v))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(sql.FieldContainsFold(FieldAction, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FeedAuditTrail) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FeedAuditTrail) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FeedAuditTrail) predicate.FeedAuditTrail {
	return predicate.FeedAuditTrail(func(s *sql.Selector) {
		p(s.Not())
	})
}
