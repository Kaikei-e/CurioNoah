// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"insightstream/domain/baseFeeds"
	"insightstream/ent/cooccurrencenetworkpool"
	"insightstream/ent/feedaudittrailaction"
	"insightstream/ent/feedaudittraillog"
	entfeeds "insightstream/ent/feeds"
	"insightstream/ent/followlist"
	"insightstream/ent/predicate"
	"insightstream/ent/users"
	"sync"
	"time"

	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCooccurrenceNetworkPool = "CooccurrenceNetworkPool"
	TypeFeedAuditTrailAction    = "FeedAuditTrailAction"
	TypeFeedAuditTrailLog       = "FeedAuditTrailLog"
	TypeFeeds                   = "Feeds"
	TypeFollowList              = "FollowList"
	TypeUsers                   = "Users"
)

// CooccurrenceNetworkPoolMutation represents an operation that mutates the CooccurrenceNetworkPool nodes in the graph.
type CooccurrenceNetworkPoolMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	site_url           *string
	titles             *[]string
	appendtitles       []string
	descriptions       *[]string
	appenddescriptions []string
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*CooccurrenceNetworkPool, error)
	predicates         []predicate.CooccurrenceNetworkPool
}

var _ ent.Mutation = (*CooccurrenceNetworkPoolMutation)(nil)

// cooccurrencenetworkpoolOption allows management of the mutation configuration using functional options.
type cooccurrencenetworkpoolOption func(*CooccurrenceNetworkPoolMutation)

// newCooccurrenceNetworkPoolMutation creates new mutation for the CooccurrenceNetworkPool entity.
func newCooccurrenceNetworkPoolMutation(c config, op Op, opts ...cooccurrencenetworkpoolOption) *CooccurrenceNetworkPoolMutation {
	m := &CooccurrenceNetworkPoolMutation{
		config:        c,
		op:            op,
		typ:           TypeCooccurrenceNetworkPool,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCooccurrenceNetworkPoolID sets the ID field of the mutation.
func withCooccurrenceNetworkPoolID(id uuid.UUID) cooccurrencenetworkpoolOption {
	return func(m *CooccurrenceNetworkPoolMutation) {
		var (
			err   error
			once  sync.Once
			value *CooccurrenceNetworkPool
		)
		m.oldValue = func(ctx context.Context) (*CooccurrenceNetworkPool, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CooccurrenceNetworkPool.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCooccurrenceNetworkPool sets the old CooccurrenceNetworkPool of the mutation.
func withCooccurrenceNetworkPool(node *CooccurrenceNetworkPool) cooccurrencenetworkpoolOption {
	return func(m *CooccurrenceNetworkPoolMutation) {
		m.oldValue = func(context.Context) (*CooccurrenceNetworkPool, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CooccurrenceNetworkPoolMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CooccurrenceNetworkPoolMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CooccurrenceNetworkPool entities.
func (m *CooccurrenceNetworkPoolMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CooccurrenceNetworkPoolMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CooccurrenceNetworkPoolMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CooccurrenceNetworkPool.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSiteURL sets the "site_url" field.
func (m *CooccurrenceNetworkPoolMutation) SetSiteURL(s string) {
	m.site_url = &s
}

// SiteURL returns the value of the "site_url" field in the mutation.
func (m *CooccurrenceNetworkPoolMutation) SiteURL() (r string, exists bool) {
	v := m.site_url
	if v == nil {
		return
	}
	return *v, true
}

// OldSiteURL returns the old "site_url" field's value of the CooccurrenceNetworkPool entity.
// If the CooccurrenceNetworkPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CooccurrenceNetworkPoolMutation) OldSiteURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSiteURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSiteURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSiteURL: %w", err)
	}
	return oldValue.SiteURL, nil
}

// ResetSiteURL resets all changes to the "site_url" field.
func (m *CooccurrenceNetworkPoolMutation) ResetSiteURL() {
	m.site_url = nil
}

// SetTitles sets the "titles" field.
func (m *CooccurrenceNetworkPoolMutation) SetTitles(s []string) {
	m.titles = &s
	m.appendtitles = nil
}

// Titles returns the value of the "titles" field in the mutation.
func (m *CooccurrenceNetworkPoolMutation) Titles() (r []string, exists bool) {
	v := m.titles
	if v == nil {
		return
	}
	return *v, true
}

// OldTitles returns the old "titles" field's value of the CooccurrenceNetworkPool entity.
// If the CooccurrenceNetworkPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CooccurrenceNetworkPoolMutation) OldTitles(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitles is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitles requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitles: %w", err)
	}
	return oldValue.Titles, nil
}

// AppendTitles adds s to the "titles" field.
func (m *CooccurrenceNetworkPoolMutation) AppendTitles(s []string) {
	m.appendtitles = append(m.appendtitles, s...)
}

// AppendedTitles returns the list of values that were appended to the "titles" field in this mutation.
func (m *CooccurrenceNetworkPoolMutation) AppendedTitles() ([]string, bool) {
	if len(m.appendtitles) == 0 {
		return nil, false
	}
	return m.appendtitles, true
}

// ResetTitles resets all changes to the "titles" field.
func (m *CooccurrenceNetworkPoolMutation) ResetTitles() {
	m.titles = nil
	m.appendtitles = nil
}

// SetDescriptions sets the "descriptions" field.
func (m *CooccurrenceNetworkPoolMutation) SetDescriptions(s []string) {
	m.descriptions = &s
	m.appenddescriptions = nil
}

// Descriptions returns the value of the "descriptions" field in the mutation.
func (m *CooccurrenceNetworkPoolMutation) Descriptions() (r []string, exists bool) {
	v := m.descriptions
	if v == nil {
		return
	}
	return *v, true
}

// OldDescriptions returns the old "descriptions" field's value of the CooccurrenceNetworkPool entity.
// If the CooccurrenceNetworkPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CooccurrenceNetworkPoolMutation) OldDescriptions(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescriptions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescriptions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescriptions: %w", err)
	}
	return oldValue.Descriptions, nil
}

// AppendDescriptions adds s to the "descriptions" field.
func (m *CooccurrenceNetworkPoolMutation) AppendDescriptions(s []string) {
	m.appenddescriptions = append(m.appenddescriptions, s...)
}

// AppendedDescriptions returns the list of values that were appended to the "descriptions" field in this mutation.
func (m *CooccurrenceNetworkPoolMutation) AppendedDescriptions() ([]string, bool) {
	if len(m.appenddescriptions) == 0 {
		return nil, false
	}
	return m.appenddescriptions, true
}

// ResetDescriptions resets all changes to the "descriptions" field.
func (m *CooccurrenceNetworkPoolMutation) ResetDescriptions() {
	m.descriptions = nil
	m.appenddescriptions = nil
}

// Where appends a list predicates to the CooccurrenceNetworkPoolMutation builder.
func (m *CooccurrenceNetworkPoolMutation) Where(ps ...predicate.CooccurrenceNetworkPool) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CooccurrenceNetworkPoolMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CooccurrenceNetworkPoolMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CooccurrenceNetworkPool, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CooccurrenceNetworkPoolMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CooccurrenceNetworkPoolMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CooccurrenceNetworkPool).
func (m *CooccurrenceNetworkPoolMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CooccurrenceNetworkPoolMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.site_url != nil {
		fields = append(fields, cooccurrencenetworkpool.FieldSiteURL)
	}
	if m.titles != nil {
		fields = append(fields, cooccurrencenetworkpool.FieldTitles)
	}
	if m.descriptions != nil {
		fields = append(fields, cooccurrencenetworkpool.FieldDescriptions)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CooccurrenceNetworkPoolMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cooccurrencenetworkpool.FieldSiteURL:
		return m.SiteURL()
	case cooccurrencenetworkpool.FieldTitles:
		return m.Titles()
	case cooccurrencenetworkpool.FieldDescriptions:
		return m.Descriptions()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CooccurrenceNetworkPoolMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cooccurrencenetworkpool.FieldSiteURL:
		return m.OldSiteURL(ctx)
	case cooccurrencenetworkpool.FieldTitles:
		return m.OldTitles(ctx)
	case cooccurrencenetworkpool.FieldDescriptions:
		return m.OldDescriptions(ctx)
	}
	return nil, fmt.Errorf("unknown CooccurrenceNetworkPool field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CooccurrenceNetworkPoolMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cooccurrencenetworkpool.FieldSiteURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSiteURL(v)
		return nil
	case cooccurrencenetworkpool.FieldTitles:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitles(v)
		return nil
	case cooccurrencenetworkpool.FieldDescriptions:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescriptions(v)
		return nil
	}
	return fmt.Errorf("unknown CooccurrenceNetworkPool field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CooccurrenceNetworkPoolMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CooccurrenceNetworkPoolMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CooccurrenceNetworkPoolMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CooccurrenceNetworkPool numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CooccurrenceNetworkPoolMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CooccurrenceNetworkPoolMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CooccurrenceNetworkPoolMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CooccurrenceNetworkPool nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CooccurrenceNetworkPoolMutation) ResetField(name string) error {
	switch name {
	case cooccurrencenetworkpool.FieldSiteURL:
		m.ResetSiteURL()
		return nil
	case cooccurrencenetworkpool.FieldTitles:
		m.ResetTitles()
		return nil
	case cooccurrencenetworkpool.FieldDescriptions:
		m.ResetDescriptions()
		return nil
	}
	return fmt.Errorf("unknown CooccurrenceNetworkPool field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CooccurrenceNetworkPoolMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CooccurrenceNetworkPoolMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CooccurrenceNetworkPoolMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CooccurrenceNetworkPoolMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CooccurrenceNetworkPoolMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CooccurrenceNetworkPoolMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CooccurrenceNetworkPoolMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CooccurrenceNetworkPool unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CooccurrenceNetworkPoolMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CooccurrenceNetworkPool edge %s", name)
}

// FeedAuditTrailActionMutation represents an operation that mutates the FeedAuditTrailAction nodes in the graph.
type FeedAuditTrailActionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	action        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FeedAuditTrailAction, error)
	predicates    []predicate.FeedAuditTrailAction
}

var _ ent.Mutation = (*FeedAuditTrailActionMutation)(nil)

// feedaudittrailactionOption allows management of the mutation configuration using functional options.
type feedaudittrailactionOption func(*FeedAuditTrailActionMutation)

// newFeedAuditTrailActionMutation creates new mutation for the FeedAuditTrailAction entity.
func newFeedAuditTrailActionMutation(c config, op Op, opts ...feedaudittrailactionOption) *FeedAuditTrailActionMutation {
	m := &FeedAuditTrailActionMutation{
		config:        c,
		op:            op,
		typ:           TypeFeedAuditTrailAction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFeedAuditTrailActionID sets the ID field of the mutation.
func withFeedAuditTrailActionID(id int) feedaudittrailactionOption {
	return func(m *FeedAuditTrailActionMutation) {
		var (
			err   error
			once  sync.Once
			value *FeedAuditTrailAction
		)
		m.oldValue = func(ctx context.Context) (*FeedAuditTrailAction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FeedAuditTrailAction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFeedAuditTrailAction sets the old FeedAuditTrailAction of the mutation.
func withFeedAuditTrailAction(node *FeedAuditTrailAction) feedaudittrailactionOption {
	return func(m *FeedAuditTrailActionMutation) {
		m.oldValue = func(context.Context) (*FeedAuditTrailAction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FeedAuditTrailActionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FeedAuditTrailActionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FeedAuditTrailAction entities.
func (m *FeedAuditTrailActionMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FeedAuditTrailActionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FeedAuditTrailActionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FeedAuditTrailAction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAction sets the "action" field.
func (m *FeedAuditTrailActionMutation) SetAction(s string) {
	m.action = &s
}

// Action returns the value of the "action" field in the mutation.
func (m *FeedAuditTrailActionMutation) Action() (r string, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the FeedAuditTrailAction entity.
// If the FeedAuditTrailAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedAuditTrailActionMutation) OldAction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ResetAction resets all changes to the "action" field.
func (m *FeedAuditTrailActionMutation) ResetAction() {
	m.action = nil
}

// Where appends a list predicates to the FeedAuditTrailActionMutation builder.
func (m *FeedAuditTrailActionMutation) Where(ps ...predicate.FeedAuditTrailAction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FeedAuditTrailActionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FeedAuditTrailActionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FeedAuditTrailAction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FeedAuditTrailActionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FeedAuditTrailActionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FeedAuditTrailAction).
func (m *FeedAuditTrailActionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FeedAuditTrailActionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.action != nil {
		fields = append(fields, feedaudittrailaction.FieldAction)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FeedAuditTrailActionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case feedaudittrailaction.FieldAction:
		return m.Action()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FeedAuditTrailActionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case feedaudittrailaction.FieldAction:
		return m.OldAction(ctx)
	}
	return nil, fmt.Errorf("unknown FeedAuditTrailAction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedAuditTrailActionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case feedaudittrailaction.FieldAction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	}
	return fmt.Errorf("unknown FeedAuditTrailAction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FeedAuditTrailActionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FeedAuditTrailActionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedAuditTrailActionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FeedAuditTrailAction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FeedAuditTrailActionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FeedAuditTrailActionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FeedAuditTrailActionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FeedAuditTrailAction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FeedAuditTrailActionMutation) ResetField(name string) error {
	switch name {
	case feedaudittrailaction.FieldAction:
		m.ResetAction()
		return nil
	}
	return fmt.Errorf("unknown FeedAuditTrailAction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FeedAuditTrailActionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FeedAuditTrailActionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FeedAuditTrailActionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FeedAuditTrailActionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FeedAuditTrailActionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FeedAuditTrailActionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FeedAuditTrailActionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FeedAuditTrailAction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FeedAuditTrailActionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FeedAuditTrailAction edge %s", name)
}

// FeedAuditTrailLogMutation represents an operation that mutates the FeedAuditTrailLog nodes in the graph.
type FeedAuditTrailLogMutation struct {
	config
	op            Op
	typ           string
	id            *int
	updated_at    *time.Time
	clearedFields map[string]struct{}
	action        *int
	clearedaction bool
	done          bool
	oldValue      func(context.Context) (*FeedAuditTrailLog, error)
	predicates    []predicate.FeedAuditTrailLog
}

var _ ent.Mutation = (*FeedAuditTrailLogMutation)(nil)

// feedaudittraillogOption allows management of the mutation configuration using functional options.
type feedaudittraillogOption func(*FeedAuditTrailLogMutation)

// newFeedAuditTrailLogMutation creates new mutation for the FeedAuditTrailLog entity.
func newFeedAuditTrailLogMutation(c config, op Op, opts ...feedaudittraillogOption) *FeedAuditTrailLogMutation {
	m := &FeedAuditTrailLogMutation{
		config:        c,
		op:            op,
		typ:           TypeFeedAuditTrailLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFeedAuditTrailLogID sets the ID field of the mutation.
func withFeedAuditTrailLogID(id int) feedaudittraillogOption {
	return func(m *FeedAuditTrailLogMutation) {
		var (
			err   error
			once  sync.Once
			value *FeedAuditTrailLog
		)
		m.oldValue = func(ctx context.Context) (*FeedAuditTrailLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FeedAuditTrailLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFeedAuditTrailLog sets the old FeedAuditTrailLog of the mutation.
func withFeedAuditTrailLog(node *FeedAuditTrailLog) feedaudittraillogOption {
	return func(m *FeedAuditTrailLogMutation) {
		m.oldValue = func(context.Context) (*FeedAuditTrailLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FeedAuditTrailLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FeedAuditTrailLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FeedAuditTrailLog entities.
func (m *FeedAuditTrailLogMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FeedAuditTrailLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FeedAuditTrailLogMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FeedAuditTrailLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FeedAuditTrailLogMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FeedAuditTrailLogMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FeedAuditTrailLog entity.
// If the FeedAuditTrailLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedAuditTrailLogMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *FeedAuditTrailLogMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[feedaudittraillog.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *FeedAuditTrailLogMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[feedaudittraillog.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FeedAuditTrailLogMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, feedaudittraillog.FieldUpdatedAt)
}

// SetActionID sets the "action" edge to the FeedAuditTrailAction entity by id.
func (m *FeedAuditTrailLogMutation) SetActionID(id int) {
	m.action = &id
}

// ClearAction clears the "action" edge to the FeedAuditTrailAction entity.
func (m *FeedAuditTrailLogMutation) ClearAction() {
	m.clearedaction = true
}

// ActionCleared reports if the "action" edge to the FeedAuditTrailAction entity was cleared.
func (m *FeedAuditTrailLogMutation) ActionCleared() bool {
	return m.clearedaction
}

// ActionID returns the "action" edge ID in the mutation.
func (m *FeedAuditTrailLogMutation) ActionID() (id int, exists bool) {
	if m.action != nil {
		return *m.action, true
	}
	return
}

// ActionIDs returns the "action" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ActionID instead. It exists only for internal usage by the builders.
func (m *FeedAuditTrailLogMutation) ActionIDs() (ids []int) {
	if id := m.action; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAction resets all changes to the "action" edge.
func (m *FeedAuditTrailLogMutation) ResetAction() {
	m.action = nil
	m.clearedaction = false
}

// Where appends a list predicates to the FeedAuditTrailLogMutation builder.
func (m *FeedAuditTrailLogMutation) Where(ps ...predicate.FeedAuditTrailLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FeedAuditTrailLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FeedAuditTrailLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FeedAuditTrailLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FeedAuditTrailLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FeedAuditTrailLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FeedAuditTrailLog).
func (m *FeedAuditTrailLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FeedAuditTrailLogMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.updated_at != nil {
		fields = append(fields, feedaudittraillog.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FeedAuditTrailLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case feedaudittraillog.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FeedAuditTrailLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case feedaudittraillog.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown FeedAuditTrailLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedAuditTrailLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case feedaudittraillog.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown FeedAuditTrailLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FeedAuditTrailLogMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FeedAuditTrailLogMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedAuditTrailLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FeedAuditTrailLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FeedAuditTrailLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(feedaudittraillog.FieldUpdatedAt) {
		fields = append(fields, feedaudittraillog.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FeedAuditTrailLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FeedAuditTrailLogMutation) ClearField(name string) error {
	switch name {
	case feedaudittraillog.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown FeedAuditTrailLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FeedAuditTrailLogMutation) ResetField(name string) error {
	switch name {
	case feedaudittraillog.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown FeedAuditTrailLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FeedAuditTrailLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.action != nil {
		edges = append(edges, feedaudittraillog.EdgeAction)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FeedAuditTrailLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case feedaudittraillog.EdgeAction:
		if id := m.action; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FeedAuditTrailLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FeedAuditTrailLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FeedAuditTrailLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedaction {
		edges = append(edges, feedaudittraillog.EdgeAction)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FeedAuditTrailLogMutation) EdgeCleared(name string) bool {
	switch name {
	case feedaudittraillog.EdgeAction:
		return m.clearedaction
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FeedAuditTrailLogMutation) ClearEdge(name string) error {
	switch name {
	case feedaudittraillog.EdgeAction:
		m.ClearAction()
		return nil
	}
	return fmt.Errorf("unknown FeedAuditTrailLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FeedAuditTrailLogMutation) ResetEdge(name string) error {
	switch name {
	case feedaudittraillog.EdgeAction:
		m.ResetAction()
		return nil
	}
	return fmt.Errorf("unknown FeedAuditTrailLog edge %s", name)
}

// FeedsMutation represents an operation that mutates the Feeds nodes in the graph.
type FeedsMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	site_url      *string
	title         *string
	description   *string
	feed_url      *string
	language      *string
	dt_created    *time.Time
	dt_updated    *time.Time
	favorites     *int64
	addfavorites  *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Feeds, error)
	predicates    []predicate.Feeds
}

var _ ent.Mutation = (*FeedsMutation)(nil)

// feedsOption allows management of the mutation configuration using functional options.
type feedsOption func(*FeedsMutation)

// newFeedsMutation creates new mutation for the Feeds entity.
func newFeedsMutation(c config, op Op, opts ...feedsOption) *FeedsMutation {
	m := &FeedsMutation{
		config:        c,
		op:            op,
		typ:           TypeFeeds,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFeedsID sets the ID field of the mutation.
func withFeedsID(id uuid.UUID) feedsOption {
	return func(m *FeedsMutation) {
		var (
			err   error
			once  sync.Once
			value *Feeds
		)
		m.oldValue = func(ctx context.Context) (*Feeds, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Feeds.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFeeds sets the old Feeds of the mutation.
func withFeeds(node *Feeds) feedsOption {
	return func(m *FeedsMutation) {
		m.oldValue = func(context.Context) (*Feeds, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FeedsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FeedsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Feeds entities.
func (m *FeedsMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FeedsMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FeedsMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Feeds.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSiteURL sets the "site_url" field.
func (m *FeedsMutation) SetSiteURL(s string) {
	m.site_url = &s
}

// SiteURL returns the value of the "site_url" field in the mutation.
func (m *FeedsMutation) SiteURL() (r string, exists bool) {
	v := m.site_url
	if v == nil {
		return
	}
	return *v, true
}

// OldSiteURL returns the old "site_url" field's value of the Feeds entity.
// If the Feeds object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedsMutation) OldSiteURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSiteURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSiteURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSiteURL: %w", err)
	}
	return oldValue.SiteURL, nil
}

// ResetSiteURL resets all changes to the "site_url" field.
func (m *FeedsMutation) ResetSiteURL() {
	m.site_url = nil
}

// SetTitle sets the "title" field.
func (m *FeedsMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *FeedsMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Feeds entity.
// If the Feeds object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedsMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *FeedsMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *FeedsMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *FeedsMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Feeds entity.
// If the Feeds object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedsMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *FeedsMutation) ResetDescription() {
	m.description = nil
}

// SetFeedURL sets the "feed_url" field.
func (m *FeedsMutation) SetFeedURL(s string) {
	m.feed_url = &s
}

// FeedURL returns the value of the "feed_url" field in the mutation.
func (m *FeedsMutation) FeedURL() (r string, exists bool) {
	v := m.feed_url
	if v == nil {
		return
	}
	return *v, true
}

// OldFeedURL returns the old "feed_url" field's value of the Feeds entity.
// If the Feeds object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedsMutation) OldFeedURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeedURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeedURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeedURL: %w", err)
	}
	return oldValue.FeedURL, nil
}

// ResetFeedURL resets all changes to the "feed_url" field.
func (m *FeedsMutation) ResetFeedURL() {
	m.feed_url = nil
}

// SetLanguage sets the "language" field.
func (m *FeedsMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *FeedsMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the Feeds entity.
// If the Feeds object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedsMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *FeedsMutation) ResetLanguage() {
	m.language = nil
}

// SetDtCreated sets the "dt_created" field.
func (m *FeedsMutation) SetDtCreated(t time.Time) {
	m.dt_created = &t
}

// DtCreated returns the value of the "dt_created" field in the mutation.
func (m *FeedsMutation) DtCreated() (r time.Time, exists bool) {
	v := m.dt_created
	if v == nil {
		return
	}
	return *v, true
}

// OldDtCreated returns the old "dt_created" field's value of the Feeds entity.
// If the Feeds object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedsMutation) OldDtCreated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDtCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDtCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDtCreated: %w", err)
	}
	return oldValue.DtCreated, nil
}

// ClearDtCreated clears the value of the "dt_created" field.
func (m *FeedsMutation) ClearDtCreated() {
	m.dt_created = nil
	m.clearedFields[entfeeds.FieldDtCreated] = struct{}{}
}

// DtCreatedCleared returns if the "dt_created" field was cleared in this mutation.
func (m *FeedsMutation) DtCreatedCleared() bool {
	_, ok := m.clearedFields[entfeeds.FieldDtCreated]
	return ok
}

// ResetDtCreated resets all changes to the "dt_created" field.
func (m *FeedsMutation) ResetDtCreated() {
	m.dt_created = nil
	delete(m.clearedFields, entfeeds.FieldDtCreated)
}

// SetDtUpdated sets the "dt_updated" field.
func (m *FeedsMutation) SetDtUpdated(t time.Time) {
	m.dt_updated = &t
}

// DtUpdated returns the value of the "dt_updated" field in the mutation.
func (m *FeedsMutation) DtUpdated() (r time.Time, exists bool) {
	v := m.dt_updated
	if v == nil {
		return
	}
	return *v, true
}

// OldDtUpdated returns the old "dt_updated" field's value of the Feeds entity.
// If the Feeds object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedsMutation) OldDtUpdated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDtUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDtUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDtUpdated: %w", err)
	}
	return oldValue.DtUpdated, nil
}

// ClearDtUpdated clears the value of the "dt_updated" field.
func (m *FeedsMutation) ClearDtUpdated() {
	m.dt_updated = nil
	m.clearedFields[entfeeds.FieldDtUpdated] = struct{}{}
}

// DtUpdatedCleared returns if the "dt_updated" field was cleared in this mutation.
func (m *FeedsMutation) DtUpdatedCleared() bool {
	_, ok := m.clearedFields[entfeeds.FieldDtUpdated]
	return ok
}

// ResetDtUpdated resets all changes to the "dt_updated" field.
func (m *FeedsMutation) ResetDtUpdated() {
	m.dt_updated = nil
	delete(m.clearedFields, entfeeds.FieldDtUpdated)
}

// SetFavorites sets the "favorites" field.
func (m *FeedsMutation) SetFavorites(i int64) {
	m.favorites = &i
	m.addfavorites = nil
}

// Favorites returns the value of the "favorites" field in the mutation.
func (m *FeedsMutation) Favorites() (r int64, exists bool) {
	v := m.favorites
	if v == nil {
		return
	}
	return *v, true
}

// OldFavorites returns the old "favorites" field's value of the Feeds entity.
// If the Feeds object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedsMutation) OldFavorites(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFavorites is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFavorites requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFavorites: %w", err)
	}
	return oldValue.Favorites, nil
}

// AddFavorites adds i to the "favorites" field.
func (m *FeedsMutation) AddFavorites(i int64) {
	if m.addfavorites != nil {
		*m.addfavorites += i
	} else {
		m.addfavorites = &i
	}
}

// AddedFavorites returns the value that was added to the "favorites" field in this mutation.
func (m *FeedsMutation) AddedFavorites() (r int64, exists bool) {
	v := m.addfavorites
	if v == nil {
		return
	}
	return *v, true
}

// ResetFavorites resets all changes to the "favorites" field.
func (m *FeedsMutation) ResetFavorites() {
	m.favorites = nil
	m.addfavorites = nil
}

// Where appends a list predicates to the FeedsMutation builder.
func (m *FeedsMutation) Where(ps ...predicate.Feeds) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FeedsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FeedsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Feeds, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FeedsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FeedsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Feeds).
func (m *FeedsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FeedsMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.site_url != nil {
		fields = append(fields, entfeeds.FieldSiteURL)
	}
	if m.title != nil {
		fields = append(fields, entfeeds.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, entfeeds.FieldDescription)
	}
	if m.feed_url != nil {
		fields = append(fields, entfeeds.FieldFeedURL)
	}
	if m.language != nil {
		fields = append(fields, entfeeds.FieldLanguage)
	}
	if m.dt_created != nil {
		fields = append(fields, entfeeds.FieldDtCreated)
	}
	if m.dt_updated != nil {
		fields = append(fields, entfeeds.FieldDtUpdated)
	}
	if m.favorites != nil {
		fields = append(fields, entfeeds.FieldFavorites)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FeedsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entfeeds.FieldSiteURL:
		return m.SiteURL()
	case entfeeds.FieldTitle:
		return m.Title()
	case entfeeds.FieldDescription:
		return m.Description()
	case entfeeds.FieldFeedURL:
		return m.FeedURL()
	case entfeeds.FieldLanguage:
		return m.Language()
	case entfeeds.FieldDtCreated:
		return m.DtCreated()
	case entfeeds.FieldDtUpdated:
		return m.DtUpdated()
	case entfeeds.FieldFavorites:
		return m.Favorites()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FeedsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entfeeds.FieldSiteURL:
		return m.OldSiteURL(ctx)
	case entfeeds.FieldTitle:
		return m.OldTitle(ctx)
	case entfeeds.FieldDescription:
		return m.OldDescription(ctx)
	case entfeeds.FieldFeedURL:
		return m.OldFeedURL(ctx)
	case entfeeds.FieldLanguage:
		return m.OldLanguage(ctx)
	case entfeeds.FieldDtCreated:
		return m.OldDtCreated(ctx)
	case entfeeds.FieldDtUpdated:
		return m.OldDtUpdated(ctx)
	case entfeeds.FieldFavorites:
		return m.OldFavorites(ctx)
	}
	return nil, fmt.Errorf("unknown Feeds field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entfeeds.FieldSiteURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSiteURL(v)
		return nil
	case entfeeds.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case entfeeds.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case entfeeds.FieldFeedURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeedURL(v)
		return nil
	case entfeeds.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case entfeeds.FieldDtCreated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDtCreated(v)
		return nil
	case entfeeds.FieldDtUpdated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDtUpdated(v)
		return nil
	case entfeeds.FieldFavorites:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFavorites(v)
		return nil
	}
	return fmt.Errorf("unknown Feeds field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FeedsMutation) AddedFields() []string {
	var fields []string
	if m.addfavorites != nil {
		fields = append(fields, entfeeds.FieldFavorites)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FeedsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case entfeeds.FieldFavorites:
		return m.AddedFavorites()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case entfeeds.FieldFavorites:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFavorites(v)
		return nil
	}
	return fmt.Errorf("unknown Feeds numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FeedsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(entfeeds.FieldDtCreated) {
		fields = append(fields, entfeeds.FieldDtCreated)
	}
	if m.FieldCleared(entfeeds.FieldDtUpdated) {
		fields = append(fields, entfeeds.FieldDtUpdated)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FeedsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FeedsMutation) ClearField(name string) error {
	switch name {
	case entfeeds.FieldDtCreated:
		m.ClearDtCreated()
		return nil
	case entfeeds.FieldDtUpdated:
		m.ClearDtUpdated()
		return nil
	}
	return fmt.Errorf("unknown Feeds nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FeedsMutation) ResetField(name string) error {
	switch name {
	case entfeeds.FieldSiteURL:
		m.ResetSiteURL()
		return nil
	case entfeeds.FieldTitle:
		m.ResetTitle()
		return nil
	case entfeeds.FieldDescription:
		m.ResetDescription()
		return nil
	case entfeeds.FieldFeedURL:
		m.ResetFeedURL()
		return nil
	case entfeeds.FieldLanguage:
		m.ResetLanguage()
		return nil
	case entfeeds.FieldDtCreated:
		m.ResetDtCreated()
		return nil
	case entfeeds.FieldDtUpdated:
		m.ResetDtUpdated()
		return nil
	case entfeeds.FieldFavorites:
		m.ResetFavorites()
		return nil
	}
	return fmt.Errorf("unknown Feeds field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FeedsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FeedsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FeedsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FeedsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FeedsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FeedsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FeedsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Feeds unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FeedsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Feeds edge %s", name)
}

// FollowListMutation represents an operation that mutates the FollowList nodes in the graph.
type FollowListMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	uuid                   *uuid.UUID
	xml_version            *int8
	addxml_version         *int8
	rss_version            *int8
	addrss_version         *int8
	url                    *string
	title                  *string
	description            *string
	link                   *string
	links                  *baseFeeds.FeedLink
	item_description       *[]baseFeeds.FeedItem
	appenditem_description []baseFeeds.FeedItem
	language               *string
	dt_created             *time.Time
	dt_updated             *time.Time
	dt_last_inserted       *time.Time
	feed_category          *int
	addfeed_category       *int
	is_active              *bool
	is_favorite            *bool
	is_read                *bool
	is_updated             *bool
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*FollowList, error)
	predicates             []predicate.FollowList
}

var _ ent.Mutation = (*FollowListMutation)(nil)

// followlistOption allows management of the mutation configuration using functional options.
type followlistOption func(*FollowListMutation)

// newFollowListMutation creates new mutation for the FollowList entity.
func newFollowListMutation(c config, op Op, opts ...followlistOption) *FollowListMutation {
	m := &FollowListMutation{
		config:        c,
		op:            op,
		typ:           TypeFollowList,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFollowListID sets the ID field of the mutation.
func withFollowListID(id int) followlistOption {
	return func(m *FollowListMutation) {
		var (
			err   error
			once  sync.Once
			value *FollowList
		)
		m.oldValue = func(ctx context.Context) (*FollowList, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FollowList.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFollowList sets the old FollowList of the mutation.
func withFollowList(node *FollowList) followlistOption {
	return func(m *FollowListMutation) {
		m.oldValue = func(context.Context) (*FollowList, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FollowListMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FollowListMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FollowListMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FollowListMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FollowList.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUUID sets the "uuid" field.
func (m *FollowListMutation) SetUUID(u uuid.UUID) {
	m.uuid = &u
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *FollowListMutation) UUID() (r uuid.UUID, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *FollowListMutation) ResetUUID() {
	m.uuid = nil
}

// SetXMLVersion sets the "xml_version" field.
func (m *FollowListMutation) SetXMLVersion(i int8) {
	m.xml_version = &i
	m.addxml_version = nil
}

// XMLVersion returns the value of the "xml_version" field in the mutation.
func (m *FollowListMutation) XMLVersion() (r int8, exists bool) {
	v := m.xml_version
	if v == nil {
		return
	}
	return *v, true
}

// OldXMLVersion returns the old "xml_version" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldXMLVersion(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldXMLVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldXMLVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldXMLVersion: %w", err)
	}
	return oldValue.XMLVersion, nil
}

// AddXMLVersion adds i to the "xml_version" field.
func (m *FollowListMutation) AddXMLVersion(i int8) {
	if m.addxml_version != nil {
		*m.addxml_version += i
	} else {
		m.addxml_version = &i
	}
}

// AddedXMLVersion returns the value that was added to the "xml_version" field in this mutation.
func (m *FollowListMutation) AddedXMLVersion() (r int8, exists bool) {
	v := m.addxml_version
	if v == nil {
		return
	}
	return *v, true
}

// ResetXMLVersion resets all changes to the "xml_version" field.
func (m *FollowListMutation) ResetXMLVersion() {
	m.xml_version = nil
	m.addxml_version = nil
}

// SetRssVersion sets the "rss_version" field.
func (m *FollowListMutation) SetRssVersion(i int8) {
	m.rss_version = &i
	m.addrss_version = nil
}

// RssVersion returns the value of the "rss_version" field in the mutation.
func (m *FollowListMutation) RssVersion() (r int8, exists bool) {
	v := m.rss_version
	if v == nil {
		return
	}
	return *v, true
}

// OldRssVersion returns the old "rss_version" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldRssVersion(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRssVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRssVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRssVersion: %w", err)
	}
	return oldValue.RssVersion, nil
}

// AddRssVersion adds i to the "rss_version" field.
func (m *FollowListMutation) AddRssVersion(i int8) {
	if m.addrss_version != nil {
		*m.addrss_version += i
	} else {
		m.addrss_version = &i
	}
}

// AddedRssVersion returns the value that was added to the "rss_version" field in this mutation.
func (m *FollowListMutation) AddedRssVersion() (r int8, exists bool) {
	v := m.addrss_version
	if v == nil {
		return
	}
	return *v, true
}

// ResetRssVersion resets all changes to the "rss_version" field.
func (m *FollowListMutation) ResetRssVersion() {
	m.rss_version = nil
	m.addrss_version = nil
}

// SetURL sets the "url" field.
func (m *FollowListMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *FollowListMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *FollowListMutation) ResetURL() {
	m.url = nil
}

// SetTitle sets the "title" field.
func (m *FollowListMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *FollowListMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *FollowListMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *FollowListMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *FollowListMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *FollowListMutation) ResetDescription() {
	m.description = nil
}

// SetLink sets the "link" field.
func (m *FollowListMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *FollowListMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ResetLink resets all changes to the "link" field.
func (m *FollowListMutation) ResetLink() {
	m.link = nil
}

// SetLinks sets the "links" field.
func (m *FollowListMutation) SetLinks(fl baseFeeds.FeedLink) {
	m.links = &fl
}

// Links returns the value of the "links" field in the mutation.
func (m *FollowListMutation) Links() (r baseFeeds.FeedLink, exists bool) {
	v := m.links
	if v == nil {
		return
	}
	return *v, true
}

// OldLinks returns the old "links" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldLinks(ctx context.Context) (v baseFeeds.FeedLink, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLinks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLinks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLinks: %w", err)
	}
	return oldValue.Links, nil
}

// ResetLinks resets all changes to the "links" field.
func (m *FollowListMutation) ResetLinks() {
	m.links = nil
}

// SetItemDescription sets the "item_description" field.
func (m *FollowListMutation) SetItemDescription(fi []baseFeeds.FeedItem) {
	m.item_description = &fi
	m.appenditem_description = nil
}

// ItemDescription returns the value of the "item_description" field in the mutation.
func (m *FollowListMutation) ItemDescription() (r []baseFeeds.FeedItem, exists bool) {
	v := m.item_description
	if v == nil {
		return
	}
	return *v, true
}

// OldItemDescription returns the old "item_description" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldItemDescription(ctx context.Context) (v []baseFeeds.FeedItem, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldItemDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldItemDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldItemDescription: %w", err)
	}
	return oldValue.ItemDescription, nil
}

// AppendItemDescription adds fi to the "item_description" field.
func (m *FollowListMutation) AppendItemDescription(fi []baseFeeds.FeedItem) {
	m.appenditem_description = append(m.appenditem_description, fi...)
}

// AppendedItemDescription returns the list of values that were appended to the "item_description" field in this mutation.
func (m *FollowListMutation) AppendedItemDescription() ([]baseFeeds.FeedItem, bool) {
	if len(m.appenditem_description) == 0 {
		return nil, false
	}
	return m.appenditem_description, true
}

// ResetItemDescription resets all changes to the "item_description" field.
func (m *FollowListMutation) ResetItemDescription() {
	m.item_description = nil
	m.appenditem_description = nil
}

// SetLanguage sets the "language" field.
func (m *FollowListMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *FollowListMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *FollowListMutation) ResetLanguage() {
	m.language = nil
}

// SetDtCreated sets the "dt_created" field.
func (m *FollowListMutation) SetDtCreated(t time.Time) {
	m.dt_created = &t
}

// DtCreated returns the value of the "dt_created" field in the mutation.
func (m *FollowListMutation) DtCreated() (r time.Time, exists bool) {
	v := m.dt_created
	if v == nil {
		return
	}
	return *v, true
}

// OldDtCreated returns the old "dt_created" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldDtCreated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDtCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDtCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDtCreated: %w", err)
	}
	return oldValue.DtCreated, nil
}

// ClearDtCreated clears the value of the "dt_created" field.
func (m *FollowListMutation) ClearDtCreated() {
	m.dt_created = nil
	m.clearedFields[followlist.FieldDtCreated] = struct{}{}
}

// DtCreatedCleared returns if the "dt_created" field was cleared in this mutation.
func (m *FollowListMutation) DtCreatedCleared() bool {
	_, ok := m.clearedFields[followlist.FieldDtCreated]
	return ok
}

// ResetDtCreated resets all changes to the "dt_created" field.
func (m *FollowListMutation) ResetDtCreated() {
	m.dt_created = nil
	delete(m.clearedFields, followlist.FieldDtCreated)
}

// SetDtUpdated sets the "dt_updated" field.
func (m *FollowListMutation) SetDtUpdated(t time.Time) {
	m.dt_updated = &t
}

// DtUpdated returns the value of the "dt_updated" field in the mutation.
func (m *FollowListMutation) DtUpdated() (r time.Time, exists bool) {
	v := m.dt_updated
	if v == nil {
		return
	}
	return *v, true
}

// OldDtUpdated returns the old "dt_updated" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldDtUpdated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDtUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDtUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDtUpdated: %w", err)
	}
	return oldValue.DtUpdated, nil
}

// ClearDtUpdated clears the value of the "dt_updated" field.
func (m *FollowListMutation) ClearDtUpdated() {
	m.dt_updated = nil
	m.clearedFields[followlist.FieldDtUpdated] = struct{}{}
}

// DtUpdatedCleared returns if the "dt_updated" field was cleared in this mutation.
func (m *FollowListMutation) DtUpdatedCleared() bool {
	_, ok := m.clearedFields[followlist.FieldDtUpdated]
	return ok
}

// ResetDtUpdated resets all changes to the "dt_updated" field.
func (m *FollowListMutation) ResetDtUpdated() {
	m.dt_updated = nil
	delete(m.clearedFields, followlist.FieldDtUpdated)
}

// SetDtLastInserted sets the "dt_last_inserted" field.
func (m *FollowListMutation) SetDtLastInserted(t time.Time) {
	m.dt_last_inserted = &t
}

// DtLastInserted returns the value of the "dt_last_inserted" field in the mutation.
func (m *FollowListMutation) DtLastInserted() (r time.Time, exists bool) {
	v := m.dt_last_inserted
	if v == nil {
		return
	}
	return *v, true
}

// OldDtLastInserted returns the old "dt_last_inserted" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldDtLastInserted(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDtLastInserted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDtLastInserted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDtLastInserted: %w", err)
	}
	return oldValue.DtLastInserted, nil
}

// ClearDtLastInserted clears the value of the "dt_last_inserted" field.
func (m *FollowListMutation) ClearDtLastInserted() {
	m.dt_last_inserted = nil
	m.clearedFields[followlist.FieldDtLastInserted] = struct{}{}
}

// DtLastInsertedCleared returns if the "dt_last_inserted" field was cleared in this mutation.
func (m *FollowListMutation) DtLastInsertedCleared() bool {
	_, ok := m.clearedFields[followlist.FieldDtLastInserted]
	return ok
}

// ResetDtLastInserted resets all changes to the "dt_last_inserted" field.
func (m *FollowListMutation) ResetDtLastInserted() {
	m.dt_last_inserted = nil
	delete(m.clearedFields, followlist.FieldDtLastInserted)
}

// SetFeedCategory sets the "feed_category" field.
func (m *FollowListMutation) SetFeedCategory(i int) {
	m.feed_category = &i
	m.addfeed_category = nil
}

// FeedCategory returns the value of the "feed_category" field in the mutation.
func (m *FollowListMutation) FeedCategory() (r int, exists bool) {
	v := m.feed_category
	if v == nil {
		return
	}
	return *v, true
}

// OldFeedCategory returns the old "feed_category" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldFeedCategory(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeedCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeedCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeedCategory: %w", err)
	}
	return oldValue.FeedCategory, nil
}

// AddFeedCategory adds i to the "feed_category" field.
func (m *FollowListMutation) AddFeedCategory(i int) {
	if m.addfeed_category != nil {
		*m.addfeed_category += i
	} else {
		m.addfeed_category = &i
	}
}

// AddedFeedCategory returns the value that was added to the "feed_category" field in this mutation.
func (m *FollowListMutation) AddedFeedCategory() (r int, exists bool) {
	v := m.addfeed_category
	if v == nil {
		return
	}
	return *v, true
}

// ResetFeedCategory resets all changes to the "feed_category" field.
func (m *FollowListMutation) ResetFeedCategory() {
	m.feed_category = nil
	m.addfeed_category = nil
}

// SetIsActive sets the "is_active" field.
func (m *FollowListMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *FollowListMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *FollowListMutation) ResetIsActive() {
	m.is_active = nil
}

// SetIsFavorite sets the "is_favorite" field.
func (m *FollowListMutation) SetIsFavorite(b bool) {
	m.is_favorite = &b
}

// IsFavorite returns the value of the "is_favorite" field in the mutation.
func (m *FollowListMutation) IsFavorite() (r bool, exists bool) {
	v := m.is_favorite
	if v == nil {
		return
	}
	return *v, true
}

// OldIsFavorite returns the old "is_favorite" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldIsFavorite(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsFavorite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsFavorite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsFavorite: %w", err)
	}
	return oldValue.IsFavorite, nil
}

// ResetIsFavorite resets all changes to the "is_favorite" field.
func (m *FollowListMutation) ResetIsFavorite() {
	m.is_favorite = nil
}

// SetIsRead sets the "is_read" field.
func (m *FollowListMutation) SetIsRead(b bool) {
	m.is_read = &b
}

// IsRead returns the value of the "is_read" field in the mutation.
func (m *FollowListMutation) IsRead() (r bool, exists bool) {
	v := m.is_read
	if v == nil {
		return
	}
	return *v, true
}

// OldIsRead returns the old "is_read" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldIsRead(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsRead is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsRead requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsRead: %w", err)
	}
	return oldValue.IsRead, nil
}

// ResetIsRead resets all changes to the "is_read" field.
func (m *FollowListMutation) ResetIsRead() {
	m.is_read = nil
}

// SetIsUpdated sets the "is_updated" field.
func (m *FollowListMutation) SetIsUpdated(b bool) {
	m.is_updated = &b
}

// IsUpdated returns the value of the "is_updated" field in the mutation.
func (m *FollowListMutation) IsUpdated() (r bool, exists bool) {
	v := m.is_updated
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUpdated returns the old "is_updated" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldIsUpdated(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUpdated: %w", err)
	}
	return oldValue.IsUpdated, nil
}

// ResetIsUpdated resets all changes to the "is_updated" field.
func (m *FollowListMutation) ResetIsUpdated() {
	m.is_updated = nil
}

// Where appends a list predicates to the FollowListMutation builder.
func (m *FollowListMutation) Where(ps ...predicate.FollowList) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FollowListMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FollowListMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FollowList, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FollowListMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FollowListMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FollowList).
func (m *FollowListMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FollowListMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.uuid != nil {
		fields = append(fields, followlist.FieldUUID)
	}
	if m.xml_version != nil {
		fields = append(fields, followlist.FieldXMLVersion)
	}
	if m.rss_version != nil {
		fields = append(fields, followlist.FieldRssVersion)
	}
	if m.url != nil {
		fields = append(fields, followlist.FieldURL)
	}
	if m.title != nil {
		fields = append(fields, followlist.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, followlist.FieldDescription)
	}
	if m.link != nil {
		fields = append(fields, followlist.FieldLink)
	}
	if m.links != nil {
		fields = append(fields, followlist.FieldLinks)
	}
	if m.item_description != nil {
		fields = append(fields, followlist.FieldItemDescription)
	}
	if m.language != nil {
		fields = append(fields, followlist.FieldLanguage)
	}
	if m.dt_created != nil {
		fields = append(fields, followlist.FieldDtCreated)
	}
	if m.dt_updated != nil {
		fields = append(fields, followlist.FieldDtUpdated)
	}
	if m.dt_last_inserted != nil {
		fields = append(fields, followlist.FieldDtLastInserted)
	}
	if m.feed_category != nil {
		fields = append(fields, followlist.FieldFeedCategory)
	}
	if m.is_active != nil {
		fields = append(fields, followlist.FieldIsActive)
	}
	if m.is_favorite != nil {
		fields = append(fields, followlist.FieldIsFavorite)
	}
	if m.is_read != nil {
		fields = append(fields, followlist.FieldIsRead)
	}
	if m.is_updated != nil {
		fields = append(fields, followlist.FieldIsUpdated)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FollowListMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case followlist.FieldUUID:
		return m.UUID()
	case followlist.FieldXMLVersion:
		return m.XMLVersion()
	case followlist.FieldRssVersion:
		return m.RssVersion()
	case followlist.FieldURL:
		return m.URL()
	case followlist.FieldTitle:
		return m.Title()
	case followlist.FieldDescription:
		return m.Description()
	case followlist.FieldLink:
		return m.Link()
	case followlist.FieldLinks:
		return m.Links()
	case followlist.FieldItemDescription:
		return m.ItemDescription()
	case followlist.FieldLanguage:
		return m.Language()
	case followlist.FieldDtCreated:
		return m.DtCreated()
	case followlist.FieldDtUpdated:
		return m.DtUpdated()
	case followlist.FieldDtLastInserted:
		return m.DtLastInserted()
	case followlist.FieldFeedCategory:
		return m.FeedCategory()
	case followlist.FieldIsActive:
		return m.IsActive()
	case followlist.FieldIsFavorite:
		return m.IsFavorite()
	case followlist.FieldIsRead:
		return m.IsRead()
	case followlist.FieldIsUpdated:
		return m.IsUpdated()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FollowListMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case followlist.FieldUUID:
		return m.OldUUID(ctx)
	case followlist.FieldXMLVersion:
		return m.OldXMLVersion(ctx)
	case followlist.FieldRssVersion:
		return m.OldRssVersion(ctx)
	case followlist.FieldURL:
		return m.OldURL(ctx)
	case followlist.FieldTitle:
		return m.OldTitle(ctx)
	case followlist.FieldDescription:
		return m.OldDescription(ctx)
	case followlist.FieldLink:
		return m.OldLink(ctx)
	case followlist.FieldLinks:
		return m.OldLinks(ctx)
	case followlist.FieldItemDescription:
		return m.OldItemDescription(ctx)
	case followlist.FieldLanguage:
		return m.OldLanguage(ctx)
	case followlist.FieldDtCreated:
		return m.OldDtCreated(ctx)
	case followlist.FieldDtUpdated:
		return m.OldDtUpdated(ctx)
	case followlist.FieldDtLastInserted:
		return m.OldDtLastInserted(ctx)
	case followlist.FieldFeedCategory:
		return m.OldFeedCategory(ctx)
	case followlist.FieldIsActive:
		return m.OldIsActive(ctx)
	case followlist.FieldIsFavorite:
		return m.OldIsFavorite(ctx)
	case followlist.FieldIsRead:
		return m.OldIsRead(ctx)
	case followlist.FieldIsUpdated:
		return m.OldIsUpdated(ctx)
	}
	return nil, fmt.Errorf("unknown FollowList field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FollowListMutation) SetField(name string, value ent.Value) error {
	switch name {
	case followlist.FieldUUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case followlist.FieldXMLVersion:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetXMLVersion(v)
		return nil
	case followlist.FieldRssVersion:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRssVersion(v)
		return nil
	case followlist.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case followlist.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case followlist.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case followlist.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case followlist.FieldLinks:
		v, ok := value.(baseFeeds.FeedLink)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLinks(v)
		return nil
	case followlist.FieldItemDescription:
		v, ok := value.([]baseFeeds.FeedItem)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetItemDescription(v)
		return nil
	case followlist.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case followlist.FieldDtCreated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDtCreated(v)
		return nil
	case followlist.FieldDtUpdated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDtUpdated(v)
		return nil
	case followlist.FieldDtLastInserted:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDtLastInserted(v)
		return nil
	case followlist.FieldFeedCategory:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeedCategory(v)
		return nil
	case followlist.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case followlist.FieldIsFavorite:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsFavorite(v)
		return nil
	case followlist.FieldIsRead:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsRead(v)
		return nil
	case followlist.FieldIsUpdated:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUpdated(v)
		return nil
	}
	return fmt.Errorf("unknown FollowList field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FollowListMutation) AddedFields() []string {
	var fields []string
	if m.addxml_version != nil {
		fields = append(fields, followlist.FieldXMLVersion)
	}
	if m.addrss_version != nil {
		fields = append(fields, followlist.FieldRssVersion)
	}
	if m.addfeed_category != nil {
		fields = append(fields, followlist.FieldFeedCategory)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FollowListMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case followlist.FieldXMLVersion:
		return m.AddedXMLVersion()
	case followlist.FieldRssVersion:
		return m.AddedRssVersion()
	case followlist.FieldFeedCategory:
		return m.AddedFeedCategory()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FollowListMutation) AddField(name string, value ent.Value) error {
	switch name {
	case followlist.FieldXMLVersion:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddXMLVersion(v)
		return nil
	case followlist.FieldRssVersion:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRssVersion(v)
		return nil
	case followlist.FieldFeedCategory:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFeedCategory(v)
		return nil
	}
	return fmt.Errorf("unknown FollowList numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FollowListMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(followlist.FieldDtCreated) {
		fields = append(fields, followlist.FieldDtCreated)
	}
	if m.FieldCleared(followlist.FieldDtUpdated) {
		fields = append(fields, followlist.FieldDtUpdated)
	}
	if m.FieldCleared(followlist.FieldDtLastInserted) {
		fields = append(fields, followlist.FieldDtLastInserted)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FollowListMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FollowListMutation) ClearField(name string) error {
	switch name {
	case followlist.FieldDtCreated:
		m.ClearDtCreated()
		return nil
	case followlist.FieldDtUpdated:
		m.ClearDtUpdated()
		return nil
	case followlist.FieldDtLastInserted:
		m.ClearDtLastInserted()
		return nil
	}
	return fmt.Errorf("unknown FollowList nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FollowListMutation) ResetField(name string) error {
	switch name {
	case followlist.FieldUUID:
		m.ResetUUID()
		return nil
	case followlist.FieldXMLVersion:
		m.ResetXMLVersion()
		return nil
	case followlist.FieldRssVersion:
		m.ResetRssVersion()
		return nil
	case followlist.FieldURL:
		m.ResetURL()
		return nil
	case followlist.FieldTitle:
		m.ResetTitle()
		return nil
	case followlist.FieldDescription:
		m.ResetDescription()
		return nil
	case followlist.FieldLink:
		m.ResetLink()
		return nil
	case followlist.FieldLinks:
		m.ResetLinks()
		return nil
	case followlist.FieldItemDescription:
		m.ResetItemDescription()
		return nil
	case followlist.FieldLanguage:
		m.ResetLanguage()
		return nil
	case followlist.FieldDtCreated:
		m.ResetDtCreated()
		return nil
	case followlist.FieldDtUpdated:
		m.ResetDtUpdated()
		return nil
	case followlist.FieldDtLastInserted:
		m.ResetDtLastInserted()
		return nil
	case followlist.FieldFeedCategory:
		m.ResetFeedCategory()
		return nil
	case followlist.FieldIsActive:
		m.ResetIsActive()
		return nil
	case followlist.FieldIsFavorite:
		m.ResetIsFavorite()
		return nil
	case followlist.FieldIsRead:
		m.ResetIsRead()
		return nil
	case followlist.FieldIsUpdated:
		m.ResetIsUpdated()
		return nil
	}
	return fmt.Errorf("unknown FollowList field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FollowListMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FollowListMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FollowListMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FollowListMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FollowListMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FollowListMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FollowListMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FollowList unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FollowListMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FollowList edge %s", name)
}

// UsersMutation represents an operation that mutates the Users nodes in the graph.
type UsersMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	username        *string
	hashed_password *[]byte
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Users, error)
	predicates      []predicate.Users
}

var _ ent.Mutation = (*UsersMutation)(nil)

// usersOption allows management of the mutation configuration using functional options.
type usersOption func(*UsersMutation)

// newUsersMutation creates new mutation for the Users entity.
func newUsersMutation(c config, op Op, opts ...usersOption) *UsersMutation {
	m := &UsersMutation{
		config:        c,
		op:            op,
		typ:           TypeUsers,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUsersID sets the ID field of the mutation.
func withUsersID(id uuid.UUID) usersOption {
	return func(m *UsersMutation) {
		var (
			err   error
			once  sync.Once
			value *Users
		)
		m.oldValue = func(ctx context.Context) (*Users, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Users.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUsers sets the old Users of the mutation.
func withUsers(node *Users) usersOption {
	return func(m *UsersMutation) {
		m.oldValue = func(context.Context) (*Users, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UsersMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UsersMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Users entities.
func (m *UsersMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UsersMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UsersMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Users.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UsersMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UsersMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UsersMutation) ResetUsername() {
	m.username = nil
}

// SetHashedPassword sets the "hashed_password" field.
func (m *UsersMutation) SetHashedPassword(b []byte) {
	m.hashed_password = &b
}

// HashedPassword returns the value of the "hashed_password" field in the mutation.
func (m *UsersMutation) HashedPassword() (r []byte, exists bool) {
	v := m.hashed_password
	if v == nil {
		return
	}
	return *v, true
}

// OldHashedPassword returns the old "hashed_password" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldHashedPassword(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashedPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashedPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashedPassword: %w", err)
	}
	return oldValue.HashedPassword, nil
}

// ResetHashedPassword resets all changes to the "hashed_password" field.
func (m *UsersMutation) ResetHashedPassword() {
	m.hashed_password = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UsersMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UsersMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UsersMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UsersMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UsersMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UsersMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the UsersMutation builder.
func (m *UsersMutation) Where(ps ...predicate.Users) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UsersMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UsersMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Users, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UsersMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UsersMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Users).
func (m *UsersMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UsersMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.username != nil {
		fields = append(fields, users.FieldUsername)
	}
	if m.hashed_password != nil {
		fields = append(fields, users.FieldHashedPassword)
	}
	if m.created_at != nil {
		fields = append(fields, users.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, users.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UsersMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case users.FieldUsername:
		return m.Username()
	case users.FieldHashedPassword:
		return m.HashedPassword()
	case users.FieldCreatedAt:
		return m.CreatedAt()
	case users.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UsersMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case users.FieldUsername:
		return m.OldUsername(ctx)
	case users.FieldHashedPassword:
		return m.OldHashedPassword(ctx)
	case users.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case users.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Users field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsersMutation) SetField(name string, value ent.Value) error {
	switch name {
	case users.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case users.FieldHashedPassword:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashedPassword(v)
		return nil
	case users.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case users.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Users field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UsersMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UsersMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsersMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Users numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UsersMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UsersMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UsersMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Users nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UsersMutation) ResetField(name string) error {
	switch name {
	case users.FieldUsername:
		m.ResetUsername()
		return nil
	case users.FieldHashedPassword:
		m.ResetHashedPassword()
		return nil
	case users.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case users.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Users field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UsersMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UsersMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UsersMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UsersMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UsersMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UsersMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UsersMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Users unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UsersMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Users edge %s", name)
}
