// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"insightstream/ent/followlist"
	"insightstream/ent/predicate"
	"sync"
	"time"

	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFollowList = "FollowList"
	TypeUser       = "User"
)

// FollowListMutation represents an operation that mutates the FollowList nodes in the graph.
type FollowListMutation struct {
	config
	op               Op
	typ              string
	id               *int
	uuid             *uuid.UUID
	xml_version      *int8
	addxml_version   *int8
	rss_version      *int8
	addrss_version   *int8
	url              *string
	title            *string
	description      *string
	link             *string
	links            *string
	language         *string
	dt_created       *time.Time
	dt_updated       *time.Time
	feed_category    *int
	addfeed_category *int
	is_active        *bool
	is_favorite      *bool
	is_read          *bool
	is_updated       *bool
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*FollowList, error)
	predicates       []predicate.FollowList
}

var _ ent.Mutation = (*FollowListMutation)(nil)

// followlistOption allows management of the mutation configuration using functional options.
type followlistOption func(*FollowListMutation)

// newFollowListMutation creates new mutation for the FollowList entity.
func newFollowListMutation(c config, op Op, opts ...followlistOption) *FollowListMutation {
	m := &FollowListMutation{
		config:        c,
		op:            op,
		typ:           TypeFollowList,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFollowListID sets the ID field of the mutation.
func withFollowListID(id int) followlistOption {
	return func(m *FollowListMutation) {
		var (
			err   error
			once  sync.Once
			value *FollowList
		)
		m.oldValue = func(ctx context.Context) (*FollowList, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FollowList.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFollowList sets the old FollowList of the mutation.
func withFollowList(node *FollowList) followlistOption {
	return func(m *FollowListMutation) {
		m.oldValue = func(context.Context) (*FollowList, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FollowListMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FollowListMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FollowListMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FollowListMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FollowList.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUUID sets the "uuid" field.
func (m *FollowListMutation) SetUUID(u uuid.UUID) {
	m.uuid = &u
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *FollowListMutation) UUID() (r uuid.UUID, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *FollowListMutation) ResetUUID() {
	m.uuid = nil
}

// SetXMLVersion sets the "xml_version" field.
func (m *FollowListMutation) SetXMLVersion(i int8) {
	m.xml_version = &i
	m.addxml_version = nil
}

// XMLVersion returns the value of the "xml_version" field in the mutation.
func (m *FollowListMutation) XMLVersion() (r int8, exists bool) {
	v := m.xml_version
	if v == nil {
		return
	}
	return *v, true
}

// OldXMLVersion returns the old "xml_version" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldXMLVersion(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldXMLVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldXMLVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldXMLVersion: %w", err)
	}
	return oldValue.XMLVersion, nil
}

// AddXMLVersion adds i to the "xml_version" field.
func (m *FollowListMutation) AddXMLVersion(i int8) {
	if m.addxml_version != nil {
		*m.addxml_version += i
	} else {
		m.addxml_version = &i
	}
}

// AddedXMLVersion returns the value that was added to the "xml_version" field in this mutation.
func (m *FollowListMutation) AddedXMLVersion() (r int8, exists bool) {
	v := m.addxml_version
	if v == nil {
		return
	}
	return *v, true
}

// ResetXMLVersion resets all changes to the "xml_version" field.
func (m *FollowListMutation) ResetXMLVersion() {
	m.xml_version = nil
	m.addxml_version = nil
}

// SetRssVersion sets the "rss_version" field.
func (m *FollowListMutation) SetRssVersion(i int8) {
	m.rss_version = &i
	m.addrss_version = nil
}

// RssVersion returns the value of the "rss_version" field in the mutation.
func (m *FollowListMutation) RssVersion() (r int8, exists bool) {
	v := m.rss_version
	if v == nil {
		return
	}
	return *v, true
}

// OldRssVersion returns the old "rss_version" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldRssVersion(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRssVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRssVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRssVersion: %w", err)
	}
	return oldValue.RssVersion, nil
}

// AddRssVersion adds i to the "rss_version" field.
func (m *FollowListMutation) AddRssVersion(i int8) {
	if m.addrss_version != nil {
		*m.addrss_version += i
	} else {
		m.addrss_version = &i
	}
}

// AddedRssVersion returns the value that was added to the "rss_version" field in this mutation.
func (m *FollowListMutation) AddedRssVersion() (r int8, exists bool) {
	v := m.addrss_version
	if v == nil {
		return
	}
	return *v, true
}

// ResetRssVersion resets all changes to the "rss_version" field.
func (m *FollowListMutation) ResetRssVersion() {
	m.rss_version = nil
	m.addrss_version = nil
}

// SetURL sets the "url" field.
func (m *FollowListMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *FollowListMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *FollowListMutation) ResetURL() {
	m.url = nil
}

// SetTitle sets the "title" field.
func (m *FollowListMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *FollowListMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *FollowListMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *FollowListMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *FollowListMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *FollowListMutation) ResetDescription() {
	m.description = nil
}

// SetLink sets the "link" field.
func (m *FollowListMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *FollowListMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ResetLink resets all changes to the "link" field.
func (m *FollowListMutation) ResetLink() {
	m.link = nil
}

// SetLinks sets the "links" field.
func (m *FollowListMutation) SetLinks(s string) {
	m.links = &s
}

// Links returns the value of the "links" field in the mutation.
func (m *FollowListMutation) Links() (r string, exists bool) {
	v := m.links
	if v == nil {
		return
	}
	return *v, true
}

// OldLinks returns the old "links" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldLinks(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLinks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLinks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLinks: %w", err)
	}
	return oldValue.Links, nil
}

// ResetLinks resets all changes to the "links" field.
func (m *FollowListMutation) ResetLinks() {
	m.links = nil
}

// SetLanguage sets the "language" field.
func (m *FollowListMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *FollowListMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *FollowListMutation) ResetLanguage() {
	m.language = nil
}

// SetDtCreated sets the "dt_created" field.
func (m *FollowListMutation) SetDtCreated(t time.Time) {
	m.dt_created = &t
}

// DtCreated returns the value of the "dt_created" field in the mutation.
func (m *FollowListMutation) DtCreated() (r time.Time, exists bool) {
	v := m.dt_created
	if v == nil {
		return
	}
	return *v, true
}

// OldDtCreated returns the old "dt_created" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldDtCreated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDtCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDtCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDtCreated: %w", err)
	}
	return oldValue.DtCreated, nil
}

// ResetDtCreated resets all changes to the "dt_created" field.
func (m *FollowListMutation) ResetDtCreated() {
	m.dt_created = nil
}

// SetDtUpdated sets the "dt_updated" field.
func (m *FollowListMutation) SetDtUpdated(t time.Time) {
	m.dt_updated = &t
}

// DtUpdated returns the value of the "dt_updated" field in the mutation.
func (m *FollowListMutation) DtUpdated() (r time.Time, exists bool) {
	v := m.dt_updated
	if v == nil {
		return
	}
	return *v, true
}

// OldDtUpdated returns the old "dt_updated" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldDtUpdated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDtUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDtUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDtUpdated: %w", err)
	}
	return oldValue.DtUpdated, nil
}

// ResetDtUpdated resets all changes to the "dt_updated" field.
func (m *FollowListMutation) ResetDtUpdated() {
	m.dt_updated = nil
}

// SetFeedCategory sets the "feed_category" field.
func (m *FollowListMutation) SetFeedCategory(i int) {
	m.feed_category = &i
	m.addfeed_category = nil
}

// FeedCategory returns the value of the "feed_category" field in the mutation.
func (m *FollowListMutation) FeedCategory() (r int, exists bool) {
	v := m.feed_category
	if v == nil {
		return
	}
	return *v, true
}

// OldFeedCategory returns the old "feed_category" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldFeedCategory(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeedCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeedCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeedCategory: %w", err)
	}
	return oldValue.FeedCategory, nil
}

// AddFeedCategory adds i to the "feed_category" field.
func (m *FollowListMutation) AddFeedCategory(i int) {
	if m.addfeed_category != nil {
		*m.addfeed_category += i
	} else {
		m.addfeed_category = &i
	}
}

// AddedFeedCategory returns the value that was added to the "feed_category" field in this mutation.
func (m *FollowListMutation) AddedFeedCategory() (r int, exists bool) {
	v := m.addfeed_category
	if v == nil {
		return
	}
	return *v, true
}

// ResetFeedCategory resets all changes to the "feed_category" field.
func (m *FollowListMutation) ResetFeedCategory() {
	m.feed_category = nil
	m.addfeed_category = nil
}

// SetIsActive sets the "is_active" field.
func (m *FollowListMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *FollowListMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *FollowListMutation) ResetIsActive() {
	m.is_active = nil
}

// SetIsFavorite sets the "is_favorite" field.
func (m *FollowListMutation) SetIsFavorite(b bool) {
	m.is_favorite = &b
}

// IsFavorite returns the value of the "is_favorite" field in the mutation.
func (m *FollowListMutation) IsFavorite() (r bool, exists bool) {
	v := m.is_favorite
	if v == nil {
		return
	}
	return *v, true
}

// OldIsFavorite returns the old "is_favorite" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldIsFavorite(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsFavorite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsFavorite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsFavorite: %w", err)
	}
	return oldValue.IsFavorite, nil
}

// ResetIsFavorite resets all changes to the "is_favorite" field.
func (m *FollowListMutation) ResetIsFavorite() {
	m.is_favorite = nil
}

// SetIsRead sets the "is_read" field.
func (m *FollowListMutation) SetIsRead(b bool) {
	m.is_read = &b
}

// IsRead returns the value of the "is_read" field in the mutation.
func (m *FollowListMutation) IsRead() (r bool, exists bool) {
	v := m.is_read
	if v == nil {
		return
	}
	return *v, true
}

// OldIsRead returns the old "is_read" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldIsRead(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsRead is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsRead requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsRead: %w", err)
	}
	return oldValue.IsRead, nil
}

// ResetIsRead resets all changes to the "is_read" field.
func (m *FollowListMutation) ResetIsRead() {
	m.is_read = nil
}

// SetIsUpdated sets the "is_updated" field.
func (m *FollowListMutation) SetIsUpdated(b bool) {
	m.is_updated = &b
}

// IsUpdated returns the value of the "is_updated" field in the mutation.
func (m *FollowListMutation) IsUpdated() (r bool, exists bool) {
	v := m.is_updated
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUpdated returns the old "is_updated" field's value of the FollowList entity.
// If the FollowList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowListMutation) OldIsUpdated(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUpdated: %w", err)
	}
	return oldValue.IsUpdated, nil
}

// ResetIsUpdated resets all changes to the "is_updated" field.
func (m *FollowListMutation) ResetIsUpdated() {
	m.is_updated = nil
}

// Where appends a list predicates to the FollowListMutation builder.
func (m *FollowListMutation) Where(ps ...predicate.FollowList) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FollowListMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FollowListMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FollowList, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FollowListMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FollowListMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FollowList).
func (m *FollowListMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FollowListMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.uuid != nil {
		fields = append(fields, followlist.FieldUUID)
	}
	if m.xml_version != nil {
		fields = append(fields, followlist.FieldXMLVersion)
	}
	if m.rss_version != nil {
		fields = append(fields, followlist.FieldRssVersion)
	}
	if m.url != nil {
		fields = append(fields, followlist.FieldURL)
	}
	if m.title != nil {
		fields = append(fields, followlist.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, followlist.FieldDescription)
	}
	if m.link != nil {
		fields = append(fields, followlist.FieldLink)
	}
	if m.links != nil {
		fields = append(fields, followlist.FieldLinks)
	}
	if m.language != nil {
		fields = append(fields, followlist.FieldLanguage)
	}
	if m.dt_created != nil {
		fields = append(fields, followlist.FieldDtCreated)
	}
	if m.dt_updated != nil {
		fields = append(fields, followlist.FieldDtUpdated)
	}
	if m.feed_category != nil {
		fields = append(fields, followlist.FieldFeedCategory)
	}
	if m.is_active != nil {
		fields = append(fields, followlist.FieldIsActive)
	}
	if m.is_favorite != nil {
		fields = append(fields, followlist.FieldIsFavorite)
	}
	if m.is_read != nil {
		fields = append(fields, followlist.FieldIsRead)
	}
	if m.is_updated != nil {
		fields = append(fields, followlist.FieldIsUpdated)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FollowListMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case followlist.FieldUUID:
		return m.UUID()
	case followlist.FieldXMLVersion:
		return m.XMLVersion()
	case followlist.FieldRssVersion:
		return m.RssVersion()
	case followlist.FieldURL:
		return m.URL()
	case followlist.FieldTitle:
		return m.Title()
	case followlist.FieldDescription:
		return m.Description()
	case followlist.FieldLink:
		return m.Link()
	case followlist.FieldLinks:
		return m.Links()
	case followlist.FieldLanguage:
		return m.Language()
	case followlist.FieldDtCreated:
		return m.DtCreated()
	case followlist.FieldDtUpdated:
		return m.DtUpdated()
	case followlist.FieldFeedCategory:
		return m.FeedCategory()
	case followlist.FieldIsActive:
		return m.IsActive()
	case followlist.FieldIsFavorite:
		return m.IsFavorite()
	case followlist.FieldIsRead:
		return m.IsRead()
	case followlist.FieldIsUpdated:
		return m.IsUpdated()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FollowListMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case followlist.FieldUUID:
		return m.OldUUID(ctx)
	case followlist.FieldXMLVersion:
		return m.OldXMLVersion(ctx)
	case followlist.FieldRssVersion:
		return m.OldRssVersion(ctx)
	case followlist.FieldURL:
		return m.OldURL(ctx)
	case followlist.FieldTitle:
		return m.OldTitle(ctx)
	case followlist.FieldDescription:
		return m.OldDescription(ctx)
	case followlist.FieldLink:
		return m.OldLink(ctx)
	case followlist.FieldLinks:
		return m.OldLinks(ctx)
	case followlist.FieldLanguage:
		return m.OldLanguage(ctx)
	case followlist.FieldDtCreated:
		return m.OldDtCreated(ctx)
	case followlist.FieldDtUpdated:
		return m.OldDtUpdated(ctx)
	case followlist.FieldFeedCategory:
		return m.OldFeedCategory(ctx)
	case followlist.FieldIsActive:
		return m.OldIsActive(ctx)
	case followlist.FieldIsFavorite:
		return m.OldIsFavorite(ctx)
	case followlist.FieldIsRead:
		return m.OldIsRead(ctx)
	case followlist.FieldIsUpdated:
		return m.OldIsUpdated(ctx)
	}
	return nil, fmt.Errorf("unknown FollowList field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FollowListMutation) SetField(name string, value ent.Value) error {
	switch name {
	case followlist.FieldUUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case followlist.FieldXMLVersion:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetXMLVersion(v)
		return nil
	case followlist.FieldRssVersion:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRssVersion(v)
		return nil
	case followlist.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case followlist.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case followlist.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case followlist.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case followlist.FieldLinks:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLinks(v)
		return nil
	case followlist.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case followlist.FieldDtCreated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDtCreated(v)
		return nil
	case followlist.FieldDtUpdated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDtUpdated(v)
		return nil
	case followlist.FieldFeedCategory:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeedCategory(v)
		return nil
	case followlist.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case followlist.FieldIsFavorite:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsFavorite(v)
		return nil
	case followlist.FieldIsRead:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsRead(v)
		return nil
	case followlist.FieldIsUpdated:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUpdated(v)
		return nil
	}
	return fmt.Errorf("unknown FollowList field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FollowListMutation) AddedFields() []string {
	var fields []string
	if m.addxml_version != nil {
		fields = append(fields, followlist.FieldXMLVersion)
	}
	if m.addrss_version != nil {
		fields = append(fields, followlist.FieldRssVersion)
	}
	if m.addfeed_category != nil {
		fields = append(fields, followlist.FieldFeedCategory)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FollowListMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case followlist.FieldXMLVersion:
		return m.AddedXMLVersion()
	case followlist.FieldRssVersion:
		return m.AddedRssVersion()
	case followlist.FieldFeedCategory:
		return m.AddedFeedCategory()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FollowListMutation) AddField(name string, value ent.Value) error {
	switch name {
	case followlist.FieldXMLVersion:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddXMLVersion(v)
		return nil
	case followlist.FieldRssVersion:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRssVersion(v)
		return nil
	case followlist.FieldFeedCategory:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFeedCategory(v)
		return nil
	}
	return fmt.Errorf("unknown FollowList numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FollowListMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FollowListMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FollowListMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FollowList nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FollowListMutation) ResetField(name string) error {
	switch name {
	case followlist.FieldUUID:
		m.ResetUUID()
		return nil
	case followlist.FieldXMLVersion:
		m.ResetXMLVersion()
		return nil
	case followlist.FieldRssVersion:
		m.ResetRssVersion()
		return nil
	case followlist.FieldURL:
		m.ResetURL()
		return nil
	case followlist.FieldTitle:
		m.ResetTitle()
		return nil
	case followlist.FieldDescription:
		m.ResetDescription()
		return nil
	case followlist.FieldLink:
		m.ResetLink()
		return nil
	case followlist.FieldLinks:
		m.ResetLinks()
		return nil
	case followlist.FieldLanguage:
		m.ResetLanguage()
		return nil
	case followlist.FieldDtCreated:
		m.ResetDtCreated()
		return nil
	case followlist.FieldDtUpdated:
		m.ResetDtUpdated()
		return nil
	case followlist.FieldFeedCategory:
		m.ResetFeedCategory()
		return nil
	case followlist.FieldIsActive:
		m.ResetIsActive()
		return nil
	case followlist.FieldIsFavorite:
		m.ResetIsFavorite()
		return nil
	case followlist.FieldIsRead:
		m.ResetIsRead()
		return nil
	case followlist.FieldIsUpdated:
		m.ResetIsUpdated()
		return nil
	}
	return fmt.Errorf("unknown FollowList field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FollowListMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FollowListMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FollowListMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FollowListMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FollowListMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FollowListMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FollowListMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FollowList unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FollowListMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FollowList edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
