// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"insightstream/ent/feedaudittrailaction"
	"insightstream/ent/feedaudittraillog"
	"insightstream/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeedAuditTrailLogQuery is the builder for querying FeedAuditTrailLog entities.
type FeedAuditTrailLogQuery struct {
	config
	ctx        *QueryContext
	order      []feedaudittraillog.OrderOption
	inters     []Interceptor
	predicates []predicate.FeedAuditTrailLog
	withAction *FeedAuditTrailActionQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FeedAuditTrailLogQuery builder.
func (fatlq *FeedAuditTrailLogQuery) Where(ps ...predicate.FeedAuditTrailLog) *FeedAuditTrailLogQuery {
	fatlq.predicates = append(fatlq.predicates, ps...)
	return fatlq
}

// Limit the number of records to be returned by this query.
func (fatlq *FeedAuditTrailLogQuery) Limit(limit int) *FeedAuditTrailLogQuery {
	fatlq.ctx.Limit = &limit
	return fatlq
}

// Offset to start from.
func (fatlq *FeedAuditTrailLogQuery) Offset(offset int) *FeedAuditTrailLogQuery {
	fatlq.ctx.Offset = &offset
	return fatlq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fatlq *FeedAuditTrailLogQuery) Unique(unique bool) *FeedAuditTrailLogQuery {
	fatlq.ctx.Unique = &unique
	return fatlq
}

// Order specifies how the records should be ordered.
func (fatlq *FeedAuditTrailLogQuery) Order(o ...feedaudittraillog.OrderOption) *FeedAuditTrailLogQuery {
	fatlq.order = append(fatlq.order, o...)
	return fatlq
}

// QueryAction chains the current query on the "action" edge.
func (fatlq *FeedAuditTrailLogQuery) QueryAction() *FeedAuditTrailActionQuery {
	query := (&FeedAuditTrailActionClient{config: fatlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fatlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fatlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feedaudittraillog.Table, feedaudittraillog.FieldID, selector),
			sqlgraph.To(feedaudittrailaction.Table, feedaudittrailaction.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedaudittraillog.ActionTable, feedaudittraillog.ActionColumn),
		)
		fromU = sqlgraph.SetNeighbors(fatlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FeedAuditTrailLog entity from the query.
// Returns a *NotFoundError when no FeedAuditTrailLog was found.
func (fatlq *FeedAuditTrailLogQuery) First(ctx context.Context) (*FeedAuditTrailLog, error) {
	nodes, err := fatlq.Limit(1).All(setContextOp(ctx, fatlq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{feedaudittraillog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fatlq *FeedAuditTrailLogQuery) FirstX(ctx context.Context) *FeedAuditTrailLog {
	node, err := fatlq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FeedAuditTrailLog ID from the query.
// Returns a *NotFoundError when no FeedAuditTrailLog ID was found.
func (fatlq *FeedAuditTrailLogQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fatlq.Limit(1).IDs(setContextOp(ctx, fatlq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{feedaudittraillog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fatlq *FeedAuditTrailLogQuery) FirstIDX(ctx context.Context) int {
	id, err := fatlq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FeedAuditTrailLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FeedAuditTrailLog entity is found.
// Returns a *NotFoundError when no FeedAuditTrailLog entities are found.
func (fatlq *FeedAuditTrailLogQuery) Only(ctx context.Context) (*FeedAuditTrailLog, error) {
	nodes, err := fatlq.Limit(2).All(setContextOp(ctx, fatlq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{feedaudittraillog.Label}
	default:
		return nil, &NotSingularError{feedaudittraillog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fatlq *FeedAuditTrailLogQuery) OnlyX(ctx context.Context) *FeedAuditTrailLog {
	node, err := fatlq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FeedAuditTrailLog ID in the query.
// Returns a *NotSingularError when more than one FeedAuditTrailLog ID is found.
// Returns a *NotFoundError when no entities are found.
func (fatlq *FeedAuditTrailLogQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fatlq.Limit(2).IDs(setContextOp(ctx, fatlq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{feedaudittraillog.Label}
	default:
		err = &NotSingularError{feedaudittraillog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fatlq *FeedAuditTrailLogQuery) OnlyIDX(ctx context.Context) int {
	id, err := fatlq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FeedAuditTrailLogs.
func (fatlq *FeedAuditTrailLogQuery) All(ctx context.Context) ([]*FeedAuditTrailLog, error) {
	ctx = setContextOp(ctx, fatlq.ctx, "All")
	if err := fatlq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FeedAuditTrailLog, *FeedAuditTrailLogQuery]()
	return withInterceptors[[]*FeedAuditTrailLog](ctx, fatlq, qr, fatlq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fatlq *FeedAuditTrailLogQuery) AllX(ctx context.Context) []*FeedAuditTrailLog {
	nodes, err := fatlq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FeedAuditTrailLog IDs.
func (fatlq *FeedAuditTrailLogQuery) IDs(ctx context.Context) (ids []int, err error) {
	if fatlq.ctx.Unique == nil && fatlq.path != nil {
		fatlq.Unique(true)
	}
	ctx = setContextOp(ctx, fatlq.ctx, "IDs")
	if err = fatlq.Select(feedaudittraillog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fatlq *FeedAuditTrailLogQuery) IDsX(ctx context.Context) []int {
	ids, err := fatlq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fatlq *FeedAuditTrailLogQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fatlq.ctx, "Count")
	if err := fatlq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fatlq, querierCount[*FeedAuditTrailLogQuery](), fatlq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fatlq *FeedAuditTrailLogQuery) CountX(ctx context.Context) int {
	count, err := fatlq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fatlq *FeedAuditTrailLogQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fatlq.ctx, "Exist")
	switch _, err := fatlq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fatlq *FeedAuditTrailLogQuery) ExistX(ctx context.Context) bool {
	exist, err := fatlq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FeedAuditTrailLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fatlq *FeedAuditTrailLogQuery) Clone() *FeedAuditTrailLogQuery {
	if fatlq == nil {
		return nil
	}
	return &FeedAuditTrailLogQuery{
		config:     fatlq.config,
		ctx:        fatlq.ctx.Clone(),
		order:      append([]feedaudittraillog.OrderOption{}, fatlq.order...),
		inters:     append([]Interceptor{}, fatlq.inters...),
		predicates: append([]predicate.FeedAuditTrailLog{}, fatlq.predicates...),
		withAction: fatlq.withAction.Clone(),
		// clone intermediate query.
		sql:  fatlq.sql.Clone(),
		path: fatlq.path,
	}
}

// WithAction tells the query-builder to eager-load the nodes that are connected to
// the "action" edge. The optional arguments are used to configure the query builder of the edge.
func (fatlq *FeedAuditTrailLogQuery) WithAction(opts ...func(*FeedAuditTrailActionQuery)) *FeedAuditTrailLogQuery {
	query := (&FeedAuditTrailActionClient{config: fatlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fatlq.withAction = query
	return fatlq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UpdatedAt time.Time `json:"updated_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FeedAuditTrailLog.Query().
//		GroupBy(feedaudittraillog.FieldUpdatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fatlq *FeedAuditTrailLogQuery) GroupBy(field string, fields ...string) *FeedAuditTrailLogGroupBy {
	fatlq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FeedAuditTrailLogGroupBy{build: fatlq}
	grbuild.flds = &fatlq.ctx.Fields
	grbuild.label = feedaudittraillog.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UpdatedAt time.Time `json:"updated_at,omitempty"`
//	}
//
//	client.FeedAuditTrailLog.Query().
//		Select(feedaudittraillog.FieldUpdatedAt).
//		Scan(ctx, &v)
func (fatlq *FeedAuditTrailLogQuery) Select(fields ...string) *FeedAuditTrailLogSelect {
	fatlq.ctx.Fields = append(fatlq.ctx.Fields, fields...)
	sbuild := &FeedAuditTrailLogSelect{FeedAuditTrailLogQuery: fatlq}
	sbuild.label = feedaudittraillog.Label
	sbuild.flds, sbuild.scan = &fatlq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FeedAuditTrailLogSelect configured with the given aggregations.
func (fatlq *FeedAuditTrailLogQuery) Aggregate(fns ...AggregateFunc) *FeedAuditTrailLogSelect {
	return fatlq.Select().Aggregate(fns...)
}

func (fatlq *FeedAuditTrailLogQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fatlq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fatlq); err != nil {
				return err
			}
		}
	}
	for _, f := range fatlq.ctx.Fields {
		if !feedaudittraillog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fatlq.path != nil {
		prev, err := fatlq.path(ctx)
		if err != nil {
			return err
		}
		fatlq.sql = prev
	}
	return nil
}

func (fatlq *FeedAuditTrailLogQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FeedAuditTrailLog, error) {
	var (
		nodes       = []*FeedAuditTrailLog{}
		withFKs     = fatlq.withFKs
		_spec       = fatlq.querySpec()
		loadedTypes = [1]bool{
			fatlq.withAction != nil,
		}
	)
	if fatlq.withAction != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, feedaudittraillog.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FeedAuditTrailLog).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FeedAuditTrailLog{config: fatlq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fatlq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fatlq.withAction; query != nil {
		if err := fatlq.loadAction(ctx, query, nodes, nil,
			func(n *FeedAuditTrailLog, e *FeedAuditTrailAction) { n.Edges.Action = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fatlq *FeedAuditTrailLogQuery) loadAction(ctx context.Context, query *FeedAuditTrailActionQuery, nodes []*FeedAuditTrailLog, init func(*FeedAuditTrailLog), assign func(*FeedAuditTrailLog, *FeedAuditTrailAction)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*FeedAuditTrailLog)
	for i := range nodes {
		if nodes[i].action_id == nil {
			continue
		}
		fk := *nodes[i].action_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(feedaudittrailaction.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "action_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (fatlq *FeedAuditTrailLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fatlq.querySpec()
	_spec.Node.Columns = fatlq.ctx.Fields
	if len(fatlq.ctx.Fields) > 0 {
		_spec.Unique = fatlq.ctx.Unique != nil && *fatlq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fatlq.driver, _spec)
}

func (fatlq *FeedAuditTrailLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(feedaudittraillog.Table, feedaudittraillog.Columns, sqlgraph.NewFieldSpec(feedaudittraillog.FieldID, field.TypeInt))
	_spec.From = fatlq.sql
	if unique := fatlq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fatlq.path != nil {
		_spec.Unique = true
	}
	if fields := fatlq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feedaudittraillog.FieldID)
		for i := range fields {
			if fields[i] != feedaudittraillog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fatlq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fatlq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fatlq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fatlq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fatlq *FeedAuditTrailLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fatlq.driver.Dialect())
	t1 := builder.Table(feedaudittraillog.Table)
	columns := fatlq.ctx.Fields
	if len(columns) == 0 {
		columns = feedaudittraillog.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fatlq.sql != nil {
		selector = fatlq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fatlq.ctx.Unique != nil && *fatlq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range fatlq.predicates {
		p(selector)
	}
	for _, p := range fatlq.order {
		p(selector)
	}
	if offset := fatlq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fatlq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FeedAuditTrailLogGroupBy is the group-by builder for FeedAuditTrailLog entities.
type FeedAuditTrailLogGroupBy struct {
	selector
	build *FeedAuditTrailLogQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fatlgb *FeedAuditTrailLogGroupBy) Aggregate(fns ...AggregateFunc) *FeedAuditTrailLogGroupBy {
	fatlgb.fns = append(fatlgb.fns, fns...)
	return fatlgb
}

// Scan applies the selector query and scans the result into the given value.
func (fatlgb *FeedAuditTrailLogGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fatlgb.build.ctx, "GroupBy")
	if err := fatlgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeedAuditTrailLogQuery, *FeedAuditTrailLogGroupBy](ctx, fatlgb.build, fatlgb, fatlgb.build.inters, v)
}

func (fatlgb *FeedAuditTrailLogGroupBy) sqlScan(ctx context.Context, root *FeedAuditTrailLogQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fatlgb.fns))
	for _, fn := range fatlgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fatlgb.flds)+len(fatlgb.fns))
		for _, f := range *fatlgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fatlgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fatlgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FeedAuditTrailLogSelect is the builder for selecting fields of FeedAuditTrailLog entities.
type FeedAuditTrailLogSelect struct {
	*FeedAuditTrailLogQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fatls *FeedAuditTrailLogSelect) Aggregate(fns ...AggregateFunc) *FeedAuditTrailLogSelect {
	fatls.fns = append(fatls.fns, fns...)
	return fatls
}

// Scan applies the selector query and scans the result into the given value.
func (fatls *FeedAuditTrailLogSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fatls.ctx, "Select")
	if err := fatls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeedAuditTrailLogQuery, *FeedAuditTrailLogSelect](ctx, fatls.FeedAuditTrailLogQuery, fatls, fatls.inters, v)
}

func (fatls *FeedAuditTrailLogSelect) sqlScan(ctx context.Context, root *FeedAuditTrailLogQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fatls.fns))
	for _, fn := range fatls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fatls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fatls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
