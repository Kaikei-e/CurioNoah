// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"insightstream/ent/feedaudittrail"
	"insightstream/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeedAuditTrailUpdate is the builder for updating FeedAuditTrail entities.
type FeedAuditTrailUpdate struct {
	config
	hooks    []Hook
	mutation *FeedAuditTrailMutation
}

// Where appends a list predicates to the FeedAuditTrailUpdate builder.
func (fatu *FeedAuditTrailUpdate) Where(ps ...predicate.FeedAuditTrail) *FeedAuditTrailUpdate {
	fatu.mutation.Where(ps...)
	return fatu
}

// SetUpdatedAt sets the "updated_at" field.
func (fatu *FeedAuditTrailUpdate) SetUpdatedAt(t time.Time) *FeedAuditTrailUpdate {
	fatu.mutation.SetUpdatedAt(t)
	return fatu
}

// SetAction sets the "action" field.
func (fatu *FeedAuditTrailUpdate) SetAction(s string) *FeedAuditTrailUpdate {
	fatu.mutation.SetAction(s)
	return fatu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (fatu *FeedAuditTrailUpdate) SetNillableAction(s *string) *FeedAuditTrailUpdate {
	if s != nil {
		fatu.SetAction(*s)
	}
	return fatu
}

// Mutation returns the FeedAuditTrailMutation object of the builder.
func (fatu *FeedAuditTrailUpdate) Mutation() *FeedAuditTrailMutation {
	return fatu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fatu *FeedAuditTrailUpdate) Save(ctx context.Context) (int, error) {
	fatu.defaults()
	return withHooks[int, FeedAuditTrailMutation](ctx, fatu.sqlSave, fatu.mutation, fatu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fatu *FeedAuditTrailUpdate) SaveX(ctx context.Context) int {
	affected, err := fatu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fatu *FeedAuditTrailUpdate) Exec(ctx context.Context) error {
	_, err := fatu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fatu *FeedAuditTrailUpdate) ExecX(ctx context.Context) {
	if err := fatu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fatu *FeedAuditTrailUpdate) defaults() {
	if _, ok := fatu.mutation.UpdatedAt(); !ok {
		v := feedaudittrail.UpdateDefaultUpdatedAt()
		fatu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fatu *FeedAuditTrailUpdate) check() error {
	if v, ok := fatu.mutation.Action(); ok {
		if err := feedaudittrail.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "FeedAuditTrail.action": %w`, err)}
		}
	}
	return nil
}

func (fatu *FeedAuditTrailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fatu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feedaudittrail.Table,
			Columns: feedaudittrail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: feedaudittrail.FieldID,
			},
		},
	}
	if ps := fatu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fatu.mutation.UpdatedAt(); ok {
		_spec.SetField(feedaudittrail.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fatu.mutation.Action(); ok {
		_spec.SetField(feedaudittrail.FieldAction, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fatu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedaudittrail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fatu.mutation.done = true
	return n, nil
}

// FeedAuditTrailUpdateOne is the builder for updating a single FeedAuditTrail entity.
type FeedAuditTrailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeedAuditTrailMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fatuo *FeedAuditTrailUpdateOne) SetUpdatedAt(t time.Time) *FeedAuditTrailUpdateOne {
	fatuo.mutation.SetUpdatedAt(t)
	return fatuo
}

// SetAction sets the "action" field.
func (fatuo *FeedAuditTrailUpdateOne) SetAction(s string) *FeedAuditTrailUpdateOne {
	fatuo.mutation.SetAction(s)
	return fatuo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (fatuo *FeedAuditTrailUpdateOne) SetNillableAction(s *string) *FeedAuditTrailUpdateOne {
	if s != nil {
		fatuo.SetAction(*s)
	}
	return fatuo
}

// Mutation returns the FeedAuditTrailMutation object of the builder.
func (fatuo *FeedAuditTrailUpdateOne) Mutation() *FeedAuditTrailMutation {
	return fatuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fatuo *FeedAuditTrailUpdateOne) Select(field string, fields ...string) *FeedAuditTrailUpdateOne {
	fatuo.fields = append([]string{field}, fields...)
	return fatuo
}

// Save executes the query and returns the updated FeedAuditTrail entity.
func (fatuo *FeedAuditTrailUpdateOne) Save(ctx context.Context) (*FeedAuditTrail, error) {
	fatuo.defaults()
	return withHooks[*FeedAuditTrail, FeedAuditTrailMutation](ctx, fatuo.sqlSave, fatuo.mutation, fatuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fatuo *FeedAuditTrailUpdateOne) SaveX(ctx context.Context) *FeedAuditTrail {
	node, err := fatuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fatuo *FeedAuditTrailUpdateOne) Exec(ctx context.Context) error {
	_, err := fatuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fatuo *FeedAuditTrailUpdateOne) ExecX(ctx context.Context) {
	if err := fatuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fatuo *FeedAuditTrailUpdateOne) defaults() {
	if _, ok := fatuo.mutation.UpdatedAt(); !ok {
		v := feedaudittrail.UpdateDefaultUpdatedAt()
		fatuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fatuo *FeedAuditTrailUpdateOne) check() error {
	if v, ok := fatuo.mutation.Action(); ok {
		if err := feedaudittrail.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "FeedAuditTrail.action": %w`, err)}
		}
	}
	return nil
}

func (fatuo *FeedAuditTrailUpdateOne) sqlSave(ctx context.Context) (_node *FeedAuditTrail, err error) {
	if err := fatuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feedaudittrail.Table,
			Columns: feedaudittrail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: feedaudittrail.FieldID,
			},
		},
	}
	id, ok := fatuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeedAuditTrail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fatuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feedaudittrail.FieldID)
		for _, f := range fields {
			if !feedaudittrail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feedaudittrail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fatuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fatuo.mutation.UpdatedAt(); ok {
		_spec.SetField(feedaudittrail.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fatuo.mutation.Action(); ok {
		_spec.SetField(feedaudittrail.FieldAction, field.TypeString, value)
	}
	_node = &FeedAuditTrail{config: fatuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fatuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedaudittrail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fatuo.mutation.done = true
	return _node, nil
}
