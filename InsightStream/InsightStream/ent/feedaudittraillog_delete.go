// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"insightstream/ent/feedaudittraillog"
	"insightstream/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeedAuditTrailLogDelete is the builder for deleting a FeedAuditTrailLog entity.
type FeedAuditTrailLogDelete struct {
	config
	hooks    []Hook
	mutation *FeedAuditTrailLogMutation
}

// Where appends a list predicates to the FeedAuditTrailLogDelete builder.
func (fatld *FeedAuditTrailLogDelete) Where(ps ...predicate.FeedAuditTrailLog) *FeedAuditTrailLogDelete {
	fatld.mutation.Where(ps...)
	return fatld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fatld *FeedAuditTrailLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, FeedAuditTrailLogMutation](ctx, fatld.sqlExec, fatld.mutation, fatld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fatld *FeedAuditTrailLogDelete) ExecX(ctx context.Context) int {
	n, err := fatld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fatld *FeedAuditTrailLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: feedaudittraillog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: feedaudittraillog.FieldID,
			},
		},
	}
	if ps := fatld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fatld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fatld.mutation.done = true
	return affected, err
}

// FeedAuditTrailLogDeleteOne is the builder for deleting a single FeedAuditTrailLog entity.
type FeedAuditTrailLogDeleteOne struct {
	fatld *FeedAuditTrailLogDelete
}

// Exec executes the deletion query.
func (fatldo *FeedAuditTrailLogDeleteOne) Exec(ctx context.Context) error {
	n, err := fatldo.fatld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{feedaudittraillog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fatldo *FeedAuditTrailLogDeleteOne) ExecX(ctx context.Context) {
	fatldo.fatld.ExecX(ctx)
}
