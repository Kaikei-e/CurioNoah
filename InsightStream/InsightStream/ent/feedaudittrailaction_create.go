// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"insightstream/ent/feedaudittrailaction"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeedAuditTrailActionCreate is the builder for creating a FeedAuditTrailAction entity.
type FeedAuditTrailActionCreate struct {
	config
	mutation *FeedAuditTrailActionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAction sets the "action" field.
func (fatac *FeedAuditTrailActionCreate) SetAction(s string) *FeedAuditTrailActionCreate {
	fatac.mutation.SetAction(s)
	return fatac
}

// SetID sets the "id" field.
func (fatac *FeedAuditTrailActionCreate) SetID(i int) *FeedAuditTrailActionCreate {
	fatac.mutation.SetID(i)
	return fatac
}

// Mutation returns the FeedAuditTrailActionMutation object of the builder.
func (fatac *FeedAuditTrailActionCreate) Mutation() *FeedAuditTrailActionMutation {
	return fatac.mutation
}

// Save creates the FeedAuditTrailAction in the database.
func (fatac *FeedAuditTrailActionCreate) Save(ctx context.Context) (*FeedAuditTrailAction, error) {
	return withHooks(ctx, fatac.sqlSave, fatac.mutation, fatac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fatac *FeedAuditTrailActionCreate) SaveX(ctx context.Context) *FeedAuditTrailAction {
	v, err := fatac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fatac *FeedAuditTrailActionCreate) Exec(ctx context.Context) error {
	_, err := fatac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fatac *FeedAuditTrailActionCreate) ExecX(ctx context.Context) {
	if err := fatac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fatac *FeedAuditTrailActionCreate) check() error {
	if _, ok := fatac.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "FeedAuditTrailAction.action"`)}
	}
	if v, ok := fatac.mutation.Action(); ok {
		if err := feedaudittrailaction.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "FeedAuditTrailAction.action": %w`, err)}
		}
	}
	return nil
}

func (fatac *FeedAuditTrailActionCreate) sqlSave(ctx context.Context) (*FeedAuditTrailAction, error) {
	if err := fatac.check(); err != nil {
		return nil, err
	}
	_node, _spec := fatac.createSpec()
	if err := sqlgraph.CreateNode(ctx, fatac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	fatac.mutation.id = &_node.ID
	fatac.mutation.done = true
	return _node, nil
}

func (fatac *FeedAuditTrailActionCreate) createSpec() (*FeedAuditTrailAction, *sqlgraph.CreateSpec) {
	var (
		_node = &FeedAuditTrailAction{config: fatac.config}
		_spec = sqlgraph.NewCreateSpec(feedaudittrailaction.Table, sqlgraph.NewFieldSpec(feedaudittrailaction.FieldID, field.TypeInt))
	)
	_spec.OnConflict = fatac.conflict
	if id, ok := fatac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fatac.mutation.Action(); ok {
		_spec.SetField(feedaudittrailaction.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FeedAuditTrailAction.Create().
//		SetAction(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeedAuditTrailActionUpsert) {
//			SetAction(v+v).
//		}).
//		Exec(ctx)
func (fatac *FeedAuditTrailActionCreate) OnConflict(opts ...sql.ConflictOption) *FeedAuditTrailActionUpsertOne {
	fatac.conflict = opts
	return &FeedAuditTrailActionUpsertOne{
		create: fatac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FeedAuditTrailAction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fatac *FeedAuditTrailActionCreate) OnConflictColumns(columns ...string) *FeedAuditTrailActionUpsertOne {
	fatac.conflict = append(fatac.conflict, sql.ConflictColumns(columns...))
	return &FeedAuditTrailActionUpsertOne{
		create: fatac,
	}
}

type (
	// FeedAuditTrailActionUpsertOne is the builder for "upsert"-ing
	//  one FeedAuditTrailAction node.
	FeedAuditTrailActionUpsertOne struct {
		create *FeedAuditTrailActionCreate
	}

	// FeedAuditTrailActionUpsert is the "OnConflict" setter.
	FeedAuditTrailActionUpsert struct {
		*sql.UpdateSet
	}
)

// SetAction sets the "action" field.
func (u *FeedAuditTrailActionUpsert) SetAction(v string) *FeedAuditTrailActionUpsert {
	u.Set(feedaudittrailaction.FieldAction, v)
	return u
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *FeedAuditTrailActionUpsert) UpdateAction() *FeedAuditTrailActionUpsert {
	u.SetExcluded(feedaudittrailaction.FieldAction)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FeedAuditTrailAction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(feedaudittrailaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FeedAuditTrailActionUpsertOne) UpdateNewValues() *FeedAuditTrailActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(feedaudittrailaction.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FeedAuditTrailAction.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FeedAuditTrailActionUpsertOne) Ignore() *FeedAuditTrailActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeedAuditTrailActionUpsertOne) DoNothing() *FeedAuditTrailActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeedAuditTrailActionCreate.OnConflict
// documentation for more info.
func (u *FeedAuditTrailActionUpsertOne) Update(set func(*FeedAuditTrailActionUpsert)) *FeedAuditTrailActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeedAuditTrailActionUpsert{UpdateSet: update})
	}))
	return u
}

// SetAction sets the "action" field.
func (u *FeedAuditTrailActionUpsertOne) SetAction(v string) *FeedAuditTrailActionUpsertOne {
	return u.Update(func(s *FeedAuditTrailActionUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *FeedAuditTrailActionUpsertOne) UpdateAction() *FeedAuditTrailActionUpsertOne {
	return u.Update(func(s *FeedAuditTrailActionUpsert) {
		s.UpdateAction()
	})
}

// Exec executes the query.
func (u *FeedAuditTrailActionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeedAuditTrailActionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeedAuditTrailActionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FeedAuditTrailActionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FeedAuditTrailActionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FeedAuditTrailActionCreateBulk is the builder for creating many FeedAuditTrailAction entities in bulk.
type FeedAuditTrailActionCreateBulk struct {
	config
	err      error
	builders []*FeedAuditTrailActionCreate
	conflict []sql.ConflictOption
}

// Save creates the FeedAuditTrailAction entities in the database.
func (fatacb *FeedAuditTrailActionCreateBulk) Save(ctx context.Context) ([]*FeedAuditTrailAction, error) {
	if fatacb.err != nil {
		return nil, fatacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fatacb.builders))
	nodes := make([]*FeedAuditTrailAction, len(fatacb.builders))
	mutators := make([]Mutator, len(fatacb.builders))
	for i := range fatacb.builders {
		func(i int, root context.Context) {
			builder := fatacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeedAuditTrailActionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fatacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fatacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fatacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fatacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fatacb *FeedAuditTrailActionCreateBulk) SaveX(ctx context.Context) []*FeedAuditTrailAction {
	v, err := fatacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fatacb *FeedAuditTrailActionCreateBulk) Exec(ctx context.Context) error {
	_, err := fatacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fatacb *FeedAuditTrailActionCreateBulk) ExecX(ctx context.Context) {
	if err := fatacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FeedAuditTrailAction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeedAuditTrailActionUpsert) {
//			SetAction(v+v).
//		}).
//		Exec(ctx)
func (fatacb *FeedAuditTrailActionCreateBulk) OnConflict(opts ...sql.ConflictOption) *FeedAuditTrailActionUpsertBulk {
	fatacb.conflict = opts
	return &FeedAuditTrailActionUpsertBulk{
		create: fatacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FeedAuditTrailAction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fatacb *FeedAuditTrailActionCreateBulk) OnConflictColumns(columns ...string) *FeedAuditTrailActionUpsertBulk {
	fatacb.conflict = append(fatacb.conflict, sql.ConflictColumns(columns...))
	return &FeedAuditTrailActionUpsertBulk{
		create: fatacb,
	}
}

// FeedAuditTrailActionUpsertBulk is the builder for "upsert"-ing
// a bulk of FeedAuditTrailAction nodes.
type FeedAuditTrailActionUpsertBulk struct {
	create *FeedAuditTrailActionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FeedAuditTrailAction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(feedaudittrailaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FeedAuditTrailActionUpsertBulk) UpdateNewValues() *FeedAuditTrailActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(feedaudittrailaction.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FeedAuditTrailAction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FeedAuditTrailActionUpsertBulk) Ignore() *FeedAuditTrailActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeedAuditTrailActionUpsertBulk) DoNothing() *FeedAuditTrailActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeedAuditTrailActionCreateBulk.OnConflict
// documentation for more info.
func (u *FeedAuditTrailActionUpsertBulk) Update(set func(*FeedAuditTrailActionUpsert)) *FeedAuditTrailActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeedAuditTrailActionUpsert{UpdateSet: update})
	}))
	return u
}

// SetAction sets the "action" field.
func (u *FeedAuditTrailActionUpsertBulk) SetAction(v string) *FeedAuditTrailActionUpsertBulk {
	return u.Update(func(s *FeedAuditTrailActionUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *FeedAuditTrailActionUpsertBulk) UpdateAction() *FeedAuditTrailActionUpsertBulk {
	return u.Update(func(s *FeedAuditTrailActionUpsert) {
		s.UpdateAction()
	})
}

// Exec executes the query.
func (u *FeedAuditTrailActionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FeedAuditTrailActionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeedAuditTrailActionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeedAuditTrailActionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
