// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"insightstream/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	entfeeds "insightstream/ent/feeds"
)

// FeedsUpdate is the builder for updating Feeds entities.
type FeedsUpdate struct {
	config
	hooks    []Hook
	mutation *FeedsMutation
}

// Where appends a list predicates to the FeedsUpdate builder.
func (fu *FeedsUpdate) Where(ps ...predicate.Feeds) *FeedsUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetSiteURL sets the "site_url" field.
func (fu *FeedsUpdate) SetSiteURL(s string) *FeedsUpdate {
	fu.mutation.SetSiteURL(s)
	return fu
}

// SetNillableSiteURL sets the "site_url" field if the given value is not nil.
func (fu *FeedsUpdate) SetNillableSiteURL(s *string) *FeedsUpdate {
	if s != nil {
		fu.SetSiteURL(*s)
	}
	return fu
}

// SetTitle sets the "title" field.
func (fu *FeedsUpdate) SetTitle(s string) *FeedsUpdate {
	fu.mutation.SetTitle(s)
	return fu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (fu *FeedsUpdate) SetNillableTitle(s *string) *FeedsUpdate {
	if s != nil {
		fu.SetTitle(*s)
	}
	return fu
}

// SetDescription sets the "description" field.
func (fu *FeedsUpdate) SetDescription(s string) *FeedsUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fu *FeedsUpdate) SetNillableDescription(s *string) *FeedsUpdate {
	if s != nil {
		fu.SetDescription(*s)
	}
	return fu
}

// SetFeedURL sets the "feed_url" field.
func (fu *FeedsUpdate) SetFeedURL(s string) *FeedsUpdate {
	fu.mutation.SetFeedURL(s)
	return fu
}

// SetNillableFeedURL sets the "feed_url" field if the given value is not nil.
func (fu *FeedsUpdate) SetNillableFeedURL(s *string) *FeedsUpdate {
	if s != nil {
		fu.SetFeedURL(*s)
	}
	return fu
}

// SetLanguage sets the "language" field.
func (fu *FeedsUpdate) SetLanguage(s string) *FeedsUpdate {
	fu.mutation.SetLanguage(s)
	return fu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (fu *FeedsUpdate) SetNillableLanguage(s *string) *FeedsUpdate {
	if s != nil {
		fu.SetLanguage(*s)
	}
	return fu
}

// SetDtUpdated sets the "dt_updated" field.
func (fu *FeedsUpdate) SetDtUpdated(t time.Time) *FeedsUpdate {
	fu.mutation.SetDtUpdated(t)
	return fu
}

// SetFavorites sets the "favorites" field.
func (fu *FeedsUpdate) SetFavorites(i int64) *FeedsUpdate {
	fu.mutation.ResetFavorites()
	fu.mutation.SetFavorites(i)
	return fu
}

// SetNillableFavorites sets the "favorites" field if the given value is not nil.
func (fu *FeedsUpdate) SetNillableFavorites(i *int64) *FeedsUpdate {
	if i != nil {
		fu.SetFavorites(*i)
	}
	return fu
}

// AddFavorites adds i to the "favorites" field.
func (fu *FeedsUpdate) AddFavorites(i int64) *FeedsUpdate {
	fu.mutation.AddFavorites(i)
	return fu
}

// Mutation returns the FeedsMutation object of the builder.
func (fu *FeedsUpdate) Mutation() *FeedsMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeedsUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks[int, FeedsMutation](ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeedsUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeedsUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeedsUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FeedsUpdate) defaults() {
	if _, ok := fu.mutation.DtUpdated(); !ok {
		v := entfeeds.UpdateDefaultDtUpdated()
		fu.mutation.SetDtUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FeedsUpdate) check() error {
	if v, ok := fu.mutation.SiteURL(); ok {
		if err := entfeeds.SiteURLValidator(v); err != nil {
			return &ValidationError{Name: "site_url", err: fmt.Errorf(`ent: validator failed for field "Feeds.site_url": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Title(); ok {
		if err := entfeeds.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Feeds.title": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Description(); ok {
		if err := entfeeds.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Feeds.description": %w`, err)}
		}
	}
	if v, ok := fu.mutation.FeedURL(); ok {
		if err := entfeeds.FeedURLValidator(v); err != nil {
			return &ValidationError{Name: "feed_url", err: fmt.Errorf(`ent: validator failed for field "Feeds.feed_url": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Language(); ok {
		if err := entfeeds.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Feeds.language": %w`, err)}
		}
	}
	return nil
}

func (fu *FeedsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entfeeds.Table,
			Columns: entfeeds.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: entfeeds.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.SiteURL(); ok {
		_spec.SetField(entfeeds.FieldSiteURL, field.TypeString, value)
	}
	if value, ok := fu.mutation.Title(); ok {
		_spec.SetField(entfeeds.FieldTitle, field.TypeString, value)
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.SetField(entfeeds.FieldDescription, field.TypeString, value)
	}
	if value, ok := fu.mutation.FeedURL(); ok {
		_spec.SetField(entfeeds.FieldFeedURL, field.TypeString, value)
	}
	if value, ok := fu.mutation.Language(); ok {
		_spec.SetField(entfeeds.FieldLanguage, field.TypeString, value)
	}
	if value, ok := fu.mutation.DtUpdated(); ok {
		_spec.SetField(entfeeds.FieldDtUpdated, field.TypeTime, value)
	}
	if value, ok := fu.mutation.Favorites(); ok {
		_spec.SetField(entfeeds.FieldFavorites, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.AddedFavorites(); ok {
		_spec.AddField(entfeeds.FieldFavorites, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entfeeds.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FeedsUpdateOne is the builder for updating a single Feeds entity.
type FeedsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeedsMutation
}

// SetSiteURL sets the "site_url" field.
func (fuo *FeedsUpdateOne) SetSiteURL(s string) *FeedsUpdateOne {
	fuo.mutation.SetSiteURL(s)
	return fuo
}

// SetNillableSiteURL sets the "site_url" field if the given value is not nil.
func (fuo *FeedsUpdateOne) SetNillableSiteURL(s *string) *FeedsUpdateOne {
	if s != nil {
		fuo.SetSiteURL(*s)
	}
	return fuo
}

// SetTitle sets the "title" field.
func (fuo *FeedsUpdateOne) SetTitle(s string) *FeedsUpdateOne {
	fuo.mutation.SetTitle(s)
	return fuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (fuo *FeedsUpdateOne) SetNillableTitle(s *string) *FeedsUpdateOne {
	if s != nil {
		fuo.SetTitle(*s)
	}
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *FeedsUpdateOne) SetDescription(s string) *FeedsUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fuo *FeedsUpdateOne) SetNillableDescription(s *string) *FeedsUpdateOne {
	if s != nil {
		fuo.SetDescription(*s)
	}
	return fuo
}

// SetFeedURL sets the "feed_url" field.
func (fuo *FeedsUpdateOne) SetFeedURL(s string) *FeedsUpdateOne {
	fuo.mutation.SetFeedURL(s)
	return fuo
}

// SetNillableFeedURL sets the "feed_url" field if the given value is not nil.
func (fuo *FeedsUpdateOne) SetNillableFeedURL(s *string) *FeedsUpdateOne {
	if s != nil {
		fuo.SetFeedURL(*s)
	}
	return fuo
}

// SetLanguage sets the "language" field.
func (fuo *FeedsUpdateOne) SetLanguage(s string) *FeedsUpdateOne {
	fuo.mutation.SetLanguage(s)
	return fuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (fuo *FeedsUpdateOne) SetNillableLanguage(s *string) *FeedsUpdateOne {
	if s != nil {
		fuo.SetLanguage(*s)
	}
	return fuo
}

// SetDtUpdated sets the "dt_updated" field.
func (fuo *FeedsUpdateOne) SetDtUpdated(t time.Time) *FeedsUpdateOne {
	fuo.mutation.SetDtUpdated(t)
	return fuo
}

// SetFavorites sets the "favorites" field.
func (fuo *FeedsUpdateOne) SetFavorites(i int64) *FeedsUpdateOne {
	fuo.mutation.ResetFavorites()
	fuo.mutation.SetFavorites(i)
	return fuo
}

// SetNillableFavorites sets the "favorites" field if the given value is not nil.
func (fuo *FeedsUpdateOne) SetNillableFavorites(i *int64) *FeedsUpdateOne {
	if i != nil {
		fuo.SetFavorites(*i)
	}
	return fuo
}

// AddFavorites adds i to the "favorites" field.
func (fuo *FeedsUpdateOne) AddFavorites(i int64) *FeedsUpdateOne {
	fuo.mutation.AddFavorites(i)
	return fuo
}

// Mutation returns the FeedsMutation object of the builder.
func (fuo *FeedsUpdateOne) Mutation() *FeedsMutation {
	return fuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FeedsUpdateOne) Select(field string, fields ...string) *FeedsUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Feeds entity.
func (fuo *FeedsUpdateOne) Save(ctx context.Context) (*Feeds, error) {
	fuo.defaults()
	return withHooks[*Feeds, FeedsMutation](ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeedsUpdateOne) SaveX(ctx context.Context) *Feeds {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeedsUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeedsUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FeedsUpdateOne) defaults() {
	if _, ok := fuo.mutation.DtUpdated(); !ok {
		v := entfeeds.UpdateDefaultDtUpdated()
		fuo.mutation.SetDtUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FeedsUpdateOne) check() error {
	if v, ok := fuo.mutation.SiteURL(); ok {
		if err := entfeeds.SiteURLValidator(v); err != nil {
			return &ValidationError{Name: "site_url", err: fmt.Errorf(`ent: validator failed for field "Feeds.site_url": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Title(); ok {
		if err := entfeeds.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Feeds.title": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Description(); ok {
		if err := entfeeds.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Feeds.description": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.FeedURL(); ok {
		if err := entfeeds.FeedURLValidator(v); err != nil {
			return &ValidationError{Name: "feed_url", err: fmt.Errorf(`ent: validator failed for field "Feeds.feed_url": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Language(); ok {
		if err := entfeeds.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Feeds.language": %w`, err)}
		}
	}
	return nil
}

func (fuo *FeedsUpdateOne) sqlSave(ctx context.Context) (_node *Feeds, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entfeeds.Table,
			Columns: entfeeds.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: entfeeds.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Feeds.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entfeeds.FieldID)
		for _, f := range fields {
			if !entfeeds.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entfeeds.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.SiteURL(); ok {
		_spec.SetField(entfeeds.FieldSiteURL, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Title(); ok {
		_spec.SetField(entfeeds.FieldTitle, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.SetField(entfeeds.FieldDescription, field.TypeString, value)
	}
	if value, ok := fuo.mutation.FeedURL(); ok {
		_spec.SetField(entfeeds.FieldFeedURL, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Language(); ok {
		_spec.SetField(entfeeds.FieldLanguage, field.TypeString, value)
	}
	if value, ok := fuo.mutation.DtUpdated(); ok {
		_spec.SetField(entfeeds.FieldDtUpdated, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.Favorites(); ok {
		_spec.SetField(entfeeds.FieldFavorites, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.AddedFavorites(); ok {
		_spec.AddField(entfeeds.FieldFavorites, field.TypeInt64, value)
	}
	_node = &Feeds{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entfeeds.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
