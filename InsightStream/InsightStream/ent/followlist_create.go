// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"insightstream/domain/baseFeeds"
	"insightstream/ent/followlist"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FollowListCreate is the builder for creating a FollowList entity.
type FollowListCreate struct {
	config
	mutation *FollowListMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (flc *FollowListCreate) SetUUID(u uuid.UUID) *FollowListCreate {
	flc.mutation.SetUUID(u)
	return flc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableUUID(u *uuid.UUID) *FollowListCreate {
	if u != nil {
		flc.SetUUID(*u)
	}
	return flc
}

// SetXMLVersion sets the "xml_version" field.
func (flc *FollowListCreate) SetXMLVersion(i int8) *FollowListCreate {
	flc.mutation.SetXMLVersion(i)
	return flc
}

// SetNillableXMLVersion sets the "xml_version" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableXMLVersion(i *int8) *FollowListCreate {
	if i != nil {
		flc.SetXMLVersion(*i)
	}
	return flc
}

// SetRssVersion sets the "rss_version" field.
func (flc *FollowListCreate) SetRssVersion(i int8) *FollowListCreate {
	flc.mutation.SetRssVersion(i)
	return flc
}

// SetNillableRssVersion sets the "rss_version" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableRssVersion(i *int8) *FollowListCreate {
	if i != nil {
		flc.SetRssVersion(*i)
	}
	return flc
}

// SetURL sets the "url" field.
func (flc *FollowListCreate) SetURL(s string) *FollowListCreate {
	flc.mutation.SetURL(s)
	return flc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableURL(s *string) *FollowListCreate {
	if s != nil {
		flc.SetURL(*s)
	}
	return flc
}

// SetTitle sets the "title" field.
func (flc *FollowListCreate) SetTitle(s string) *FollowListCreate {
	flc.mutation.SetTitle(s)
	return flc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableTitle(s *string) *FollowListCreate {
	if s != nil {
		flc.SetTitle(*s)
	}
	return flc
}

// SetDescription sets the "description" field.
func (flc *FollowListCreate) SetDescription(s string) *FollowListCreate {
	flc.mutation.SetDescription(s)
	return flc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableDescription(s *string) *FollowListCreate {
	if s != nil {
		flc.SetDescription(*s)
	}
	return flc
}

// SetLink sets the "link" field.
func (flc *FollowListCreate) SetLink(s string) *FollowListCreate {
	flc.mutation.SetLink(s)
	return flc
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableLink(s *string) *FollowListCreate {
	if s != nil {
		flc.SetLink(*s)
	}
	return flc
}

// SetLinks sets the "links" field.
func (flc *FollowListCreate) SetLinks(bfl baseFeeds.FeedLink) *FollowListCreate {
	flc.mutation.SetLinks(bfl)
	return flc
}

// SetNillableLinks sets the "links" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableLinks(bfl *baseFeeds.FeedLink) *FollowListCreate {
	if bfl != nil {
		flc.SetLinks(*bfl)
	}
	return flc
}

// SetItemDescription sets the "item_description" field.
func (flc *FollowListCreate) SetItemDescription(bfi []baseFeeds.FeedItem) *FollowListCreate {
	flc.mutation.SetItemDescription(bfi)
	return flc
}

// SetLanguage sets the "language" field.
func (flc *FollowListCreate) SetLanguage(s string) *FollowListCreate {
	flc.mutation.SetLanguage(s)
	return flc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableLanguage(s *string) *FollowListCreate {
	if s != nil {
		flc.SetLanguage(*s)
	}
	return flc
}

// SetDtCreated sets the "dt_created" field.
func (flc *FollowListCreate) SetDtCreated(t time.Time) *FollowListCreate {
	flc.mutation.SetDtCreated(t)
	return flc
}

// SetNillableDtCreated sets the "dt_created" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableDtCreated(t *time.Time) *FollowListCreate {
	if t != nil {
		flc.SetDtCreated(*t)
	}
	return flc
}

// SetDtUpdated sets the "dt_updated" field.
func (flc *FollowListCreate) SetDtUpdated(t time.Time) *FollowListCreate {
	flc.mutation.SetDtUpdated(t)
	return flc
}

// SetNillableDtUpdated sets the "dt_updated" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableDtUpdated(t *time.Time) *FollowListCreate {
	if t != nil {
		flc.SetDtUpdated(*t)
	}
	return flc
}

// SetDtLastInserted sets the "dt_last_inserted" field.
func (flc *FollowListCreate) SetDtLastInserted(t time.Time) *FollowListCreate {
	flc.mutation.SetDtLastInserted(t)
	return flc
}

// SetNillableDtLastInserted sets the "dt_last_inserted" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableDtLastInserted(t *time.Time) *FollowListCreate {
	if t != nil {
		flc.SetDtLastInserted(*t)
	}
	return flc
}

// SetFeedCategory sets the "feed_category" field.
func (flc *FollowListCreate) SetFeedCategory(i int) *FollowListCreate {
	flc.mutation.SetFeedCategory(i)
	return flc
}

// SetNillableFeedCategory sets the "feed_category" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableFeedCategory(i *int) *FollowListCreate {
	if i != nil {
		flc.SetFeedCategory(*i)
	}
	return flc
}

// SetIsActive sets the "is_active" field.
func (flc *FollowListCreate) SetIsActive(b bool) *FollowListCreate {
	flc.mutation.SetIsActive(b)
	return flc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableIsActive(b *bool) *FollowListCreate {
	if b != nil {
		flc.SetIsActive(*b)
	}
	return flc
}

// SetIsFavorite sets the "is_favorite" field.
func (flc *FollowListCreate) SetIsFavorite(b bool) *FollowListCreate {
	flc.mutation.SetIsFavorite(b)
	return flc
}

// SetNillableIsFavorite sets the "is_favorite" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableIsFavorite(b *bool) *FollowListCreate {
	if b != nil {
		flc.SetIsFavorite(*b)
	}
	return flc
}

// SetIsRead sets the "is_read" field.
func (flc *FollowListCreate) SetIsRead(b bool) *FollowListCreate {
	flc.mutation.SetIsRead(b)
	return flc
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableIsRead(b *bool) *FollowListCreate {
	if b != nil {
		flc.SetIsRead(*b)
	}
	return flc
}

// SetIsUpdated sets the "is_updated" field.
func (flc *FollowListCreate) SetIsUpdated(b bool) *FollowListCreate {
	flc.mutation.SetIsUpdated(b)
	return flc
}

// SetNillableIsUpdated sets the "is_updated" field if the given value is not nil.
func (flc *FollowListCreate) SetNillableIsUpdated(b *bool) *FollowListCreate {
	if b != nil {
		flc.SetIsUpdated(*b)
	}
	return flc
}

// Mutation returns the FollowListMutation object of the builder.
func (flc *FollowListCreate) Mutation() *FollowListMutation {
	return flc.mutation
}

// Save creates the FollowList in the database.
func (flc *FollowListCreate) Save(ctx context.Context) (*FollowList, error) {
	flc.defaults()
	return withHooks[*FollowList, FollowListMutation](ctx, flc.sqlSave, flc.mutation, flc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (flc *FollowListCreate) SaveX(ctx context.Context) *FollowList {
	v, err := flc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (flc *FollowListCreate) Exec(ctx context.Context) error {
	_, err := flc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (flc *FollowListCreate) ExecX(ctx context.Context) {
	if err := flc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (flc *FollowListCreate) defaults() {
	if _, ok := flc.mutation.UUID(); !ok {
		v := followlist.DefaultUUID()
		flc.mutation.SetUUID(v)
	}
	if _, ok := flc.mutation.XMLVersion(); !ok {
		v := followlist.DefaultXMLVersion
		flc.mutation.SetXMLVersion(v)
	}
	if _, ok := flc.mutation.RssVersion(); !ok {
		v := followlist.DefaultRssVersion
		flc.mutation.SetRssVersion(v)
	}
	if _, ok := flc.mutation.URL(); !ok {
		v := followlist.DefaultURL
		flc.mutation.SetURL(v)
	}
	if _, ok := flc.mutation.Title(); !ok {
		v := followlist.DefaultTitle
		flc.mutation.SetTitle(v)
	}
	if _, ok := flc.mutation.Description(); !ok {
		v := followlist.DefaultDescription
		flc.mutation.SetDescription(v)
	}
	if _, ok := flc.mutation.Link(); !ok {
		v := followlist.DefaultLink
		flc.mutation.SetLink(v)
	}
	if _, ok := flc.mutation.Links(); !ok {
		v := followlist.DefaultLinks
		flc.mutation.SetLinks(v)
	}
	if _, ok := flc.mutation.Language(); !ok {
		v := followlist.DefaultLanguage
		flc.mutation.SetLanguage(v)
	}
	if _, ok := flc.mutation.DtCreated(); !ok {
		v := followlist.DefaultDtCreated
		flc.mutation.SetDtCreated(v)
	}
	if _, ok := flc.mutation.DtUpdated(); !ok {
		v := followlist.DefaultDtUpdated
		flc.mutation.SetDtUpdated(v)
	}
	if _, ok := flc.mutation.DtLastInserted(); !ok {
		v := followlist.DefaultDtLastInserted
		flc.mutation.SetDtLastInserted(v)
	}
	if _, ok := flc.mutation.FeedCategory(); !ok {
		v := followlist.DefaultFeedCategory
		flc.mutation.SetFeedCategory(v)
	}
	if _, ok := flc.mutation.IsActive(); !ok {
		v := followlist.DefaultIsActive
		flc.mutation.SetIsActive(v)
	}
	if _, ok := flc.mutation.IsFavorite(); !ok {
		v := followlist.DefaultIsFavorite
		flc.mutation.SetIsFavorite(v)
	}
	if _, ok := flc.mutation.IsRead(); !ok {
		v := followlist.DefaultIsRead
		flc.mutation.SetIsRead(v)
	}
	if _, ok := flc.mutation.IsUpdated(); !ok {
		v := followlist.DefaultIsUpdated
		flc.mutation.SetIsUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (flc *FollowListCreate) check() error {
	if _, ok := flc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "FollowList.uuid"`)}
	}
	if _, ok := flc.mutation.XMLVersion(); !ok {
		return &ValidationError{Name: "xml_version", err: errors.New(`ent: missing required field "FollowList.xml_version"`)}
	}
	if _, ok := flc.mutation.RssVersion(); !ok {
		return &ValidationError{Name: "rss_version", err: errors.New(`ent: missing required field "FollowList.rss_version"`)}
	}
	if _, ok := flc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "FollowList.url"`)}
	}
	if v, ok := flc.mutation.URL(); ok {
		if err := followlist.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "FollowList.url": %w`, err)}
		}
	}
	if _, ok := flc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "FollowList.title"`)}
	}
	if _, ok := flc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "FollowList.description"`)}
	}
	if _, ok := flc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`ent: missing required field "FollowList.link"`)}
	}
	if _, ok := flc.mutation.Links(); !ok {
		return &ValidationError{Name: "links", err: errors.New(`ent: missing required field "FollowList.links"`)}
	}
	if _, ok := flc.mutation.ItemDescription(); !ok {
		return &ValidationError{Name: "item_description", err: errors.New(`ent: missing required field "FollowList.item_description"`)}
	}
	if _, ok := flc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "FollowList.language"`)}
	}
	if v, ok := flc.mutation.Language(); ok {
		if err := followlist.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "FollowList.language": %w`, err)}
		}
	}
	if _, ok := flc.mutation.FeedCategory(); !ok {
		return &ValidationError{Name: "feed_category", err: errors.New(`ent: missing required field "FollowList.feed_category"`)}
	}
	if _, ok := flc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "FollowList.is_active"`)}
	}
	if _, ok := flc.mutation.IsFavorite(); !ok {
		return &ValidationError{Name: "is_favorite", err: errors.New(`ent: missing required field "FollowList.is_favorite"`)}
	}
	if _, ok := flc.mutation.IsRead(); !ok {
		return &ValidationError{Name: "is_read", err: errors.New(`ent: missing required field "FollowList.is_read"`)}
	}
	if _, ok := flc.mutation.IsUpdated(); !ok {
		return &ValidationError{Name: "is_updated", err: errors.New(`ent: missing required field "FollowList.is_updated"`)}
	}
	return nil
}

func (flc *FollowListCreate) sqlSave(ctx context.Context) (*FollowList, error) {
	if err := flc.check(); err != nil {
		return nil, err
	}
	_node, _spec := flc.createSpec()
	if err := sqlgraph.CreateNode(ctx, flc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	flc.mutation.id = &_node.ID
	flc.mutation.done = true
	return _node, nil
}

func (flc *FollowListCreate) createSpec() (*FollowList, *sqlgraph.CreateSpec) {
	var (
		_node = &FollowList{config: flc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: followlist.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: followlist.FieldID,
			},
		}
	)
	if value, ok := flc.mutation.UUID(); ok {
		_spec.SetField(followlist.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := flc.mutation.XMLVersion(); ok {
		_spec.SetField(followlist.FieldXMLVersion, field.TypeInt8, value)
		_node.XMLVersion = value
	}
	if value, ok := flc.mutation.RssVersion(); ok {
		_spec.SetField(followlist.FieldRssVersion, field.TypeInt8, value)
		_node.RssVersion = value
	}
	if value, ok := flc.mutation.URL(); ok {
		_spec.SetField(followlist.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := flc.mutation.Title(); ok {
		_spec.SetField(followlist.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := flc.mutation.Description(); ok {
		_spec.SetField(followlist.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := flc.mutation.Link(); ok {
		_spec.SetField(followlist.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if value, ok := flc.mutation.Links(); ok {
		_spec.SetField(followlist.FieldLinks, field.TypeJSON, value)
		_node.Links = value
	}
	if value, ok := flc.mutation.ItemDescription(); ok {
		_spec.SetField(followlist.FieldItemDescription, field.TypeJSON, value)
		_node.ItemDescription = value
	}
	if value, ok := flc.mutation.Language(); ok {
		_spec.SetField(followlist.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := flc.mutation.DtCreated(); ok {
		_spec.SetField(followlist.FieldDtCreated, field.TypeTime, value)
		_node.DtCreated = value
	}
	if value, ok := flc.mutation.DtUpdated(); ok {
		_spec.SetField(followlist.FieldDtUpdated, field.TypeTime, value)
		_node.DtUpdated = value
	}
	if value, ok := flc.mutation.DtLastInserted(); ok {
		_spec.SetField(followlist.FieldDtLastInserted, field.TypeTime, value)
		_node.DtLastInserted = value
	}
	if value, ok := flc.mutation.FeedCategory(); ok {
		_spec.SetField(followlist.FieldFeedCategory, field.TypeInt, value)
		_node.FeedCategory = value
	}
	if value, ok := flc.mutation.IsActive(); ok {
		_spec.SetField(followlist.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := flc.mutation.IsFavorite(); ok {
		_spec.SetField(followlist.FieldIsFavorite, field.TypeBool, value)
		_node.IsFavorite = value
	}
	if value, ok := flc.mutation.IsRead(); ok {
		_spec.SetField(followlist.FieldIsRead, field.TypeBool, value)
		_node.IsRead = value
	}
	if value, ok := flc.mutation.IsUpdated(); ok {
		_spec.SetField(followlist.FieldIsUpdated, field.TypeBool, value)
		_node.IsUpdated = value
	}
	return _node, _spec
}

// FollowListCreateBulk is the builder for creating many FollowList entities in bulk.
type FollowListCreateBulk struct {
	config
	builders []*FollowListCreate
}

// Save creates the FollowList entities in the database.
func (flcb *FollowListCreateBulk) Save(ctx context.Context) ([]*FollowList, error) {
	specs := make([]*sqlgraph.CreateSpec, len(flcb.builders))
	nodes := make([]*FollowList, len(flcb.builders))
	mutators := make([]Mutator, len(flcb.builders))
	for i := range flcb.builders {
		func(i int, root context.Context) {
			builder := flcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FollowListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, flcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, flcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, flcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (flcb *FollowListCreateBulk) SaveX(ctx context.Context) []*FollowList {
	v, err := flcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (flcb *FollowListCreateBulk) Exec(ctx context.Context) error {
	_, err := flcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (flcb *FollowListCreateBulk) ExecX(ctx context.Context) {
	if err := flcb.Exec(ctx); err != nil {
		panic(err)
	}
}
