// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"insightstream/ent/migrate"

	"insightstream/ent/cooccurrencenetworkpool"
	"insightstream/ent/feedaudittrailaction"
	"insightstream/ent/feedaudittraillog"
	"insightstream/ent/feeds"
	"insightstream/ent/followlists"
	"insightstream/ent/users"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CooccurrenceNetworkPool is the client for interacting with the CooccurrenceNetworkPool builders.
	CooccurrenceNetworkPool *CooccurrenceNetworkPoolClient
	// FeedAuditTrailAction is the client for interacting with the FeedAuditTrailAction builders.
	FeedAuditTrailAction *FeedAuditTrailActionClient
	// FeedAuditTrailLog is the client for interacting with the FeedAuditTrailLog builders.
	FeedAuditTrailLog *FeedAuditTrailLogClient
	// Feeds is the client for interacting with the Feeds builders.
	Feeds *FeedsClient
	// FollowLists is the client for interacting with the FollowLists builders.
	FollowLists *FollowListsClient
	// Users is the client for interacting with the Users builders.
	Users *UsersClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CooccurrenceNetworkPool = NewCooccurrenceNetworkPoolClient(c.config)
	c.FeedAuditTrailAction = NewFeedAuditTrailActionClient(c.config)
	c.FeedAuditTrailLog = NewFeedAuditTrailLogClient(c.config)
	c.Feeds = NewFeedsClient(c.config)
	c.FollowLists = NewFollowListsClient(c.config)
	c.Users = NewUsersClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		CooccurrenceNetworkPool: NewCooccurrenceNetworkPoolClient(cfg),
		FeedAuditTrailAction:    NewFeedAuditTrailActionClient(cfg),
		FeedAuditTrailLog:       NewFeedAuditTrailLogClient(cfg),
		Feeds:                   NewFeedsClient(cfg),
		FollowLists:             NewFollowListsClient(cfg),
		Users:                   NewUsersClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		CooccurrenceNetworkPool: NewCooccurrenceNetworkPoolClient(cfg),
		FeedAuditTrailAction:    NewFeedAuditTrailActionClient(cfg),
		FeedAuditTrailLog:       NewFeedAuditTrailLogClient(cfg),
		Feeds:                   NewFeedsClient(cfg),
		FollowLists:             NewFollowListsClient(cfg),
		Users:                   NewUsersClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CooccurrenceNetworkPool.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CooccurrenceNetworkPool.Use(hooks...)
	c.FeedAuditTrailAction.Use(hooks...)
	c.FeedAuditTrailLog.Use(hooks...)
	c.Feeds.Use(hooks...)
	c.FollowLists.Use(hooks...)
	c.Users.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.CooccurrenceNetworkPool.Intercept(interceptors...)
	c.FeedAuditTrailAction.Intercept(interceptors...)
	c.FeedAuditTrailLog.Intercept(interceptors...)
	c.Feeds.Intercept(interceptors...)
	c.FollowLists.Intercept(interceptors...)
	c.Users.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CooccurrenceNetworkPoolMutation:
		return c.CooccurrenceNetworkPool.mutate(ctx, m)
	case *FeedAuditTrailActionMutation:
		return c.FeedAuditTrailAction.mutate(ctx, m)
	case *FeedAuditTrailLogMutation:
		return c.FeedAuditTrailLog.mutate(ctx, m)
	case *FeedsMutation:
		return c.Feeds.mutate(ctx, m)
	case *FollowListsMutation:
		return c.FollowLists.mutate(ctx, m)
	case *UsersMutation:
		return c.Users.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CooccurrenceNetworkPoolClient is a client for the CooccurrenceNetworkPool schema.
type CooccurrenceNetworkPoolClient struct {
	config
}

// NewCooccurrenceNetworkPoolClient returns a client for the CooccurrenceNetworkPool from the given config.
func NewCooccurrenceNetworkPoolClient(c config) *CooccurrenceNetworkPoolClient {
	return &CooccurrenceNetworkPoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cooccurrencenetworkpool.Hooks(f(g(h())))`.
func (c *CooccurrenceNetworkPoolClient) Use(hooks ...Hook) {
	c.hooks.CooccurrenceNetworkPool = append(c.hooks.CooccurrenceNetworkPool, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cooccurrencenetworkpool.Intercept(f(g(h())))`.
func (c *CooccurrenceNetworkPoolClient) Intercept(interceptors ...Interceptor) {
	c.inters.CooccurrenceNetworkPool = append(c.inters.CooccurrenceNetworkPool, interceptors...)
}

// Create returns a builder for creating a CooccurrenceNetworkPool entity.
func (c *CooccurrenceNetworkPoolClient) Create() *CooccurrenceNetworkPoolCreate {
	mutation := newCooccurrenceNetworkPoolMutation(c.config, OpCreate)
	return &CooccurrenceNetworkPoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CooccurrenceNetworkPool entities.
func (c *CooccurrenceNetworkPoolClient) CreateBulk(builders ...*CooccurrenceNetworkPoolCreate) *CooccurrenceNetworkPoolCreateBulk {
	return &CooccurrenceNetworkPoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CooccurrenceNetworkPool.
func (c *CooccurrenceNetworkPoolClient) Update() *CooccurrenceNetworkPoolUpdate {
	mutation := newCooccurrenceNetworkPoolMutation(c.config, OpUpdate)
	return &CooccurrenceNetworkPoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CooccurrenceNetworkPoolClient) UpdateOne(cnp *CooccurrenceNetworkPool) *CooccurrenceNetworkPoolUpdateOne {
	mutation := newCooccurrenceNetworkPoolMutation(c.config, OpUpdateOne, withCooccurrenceNetworkPool(cnp))
	return &CooccurrenceNetworkPoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CooccurrenceNetworkPoolClient) UpdateOneID(id uuid.UUID) *CooccurrenceNetworkPoolUpdateOne {
	mutation := newCooccurrenceNetworkPoolMutation(c.config, OpUpdateOne, withCooccurrenceNetworkPoolID(id))
	return &CooccurrenceNetworkPoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CooccurrenceNetworkPool.
func (c *CooccurrenceNetworkPoolClient) Delete() *CooccurrenceNetworkPoolDelete {
	mutation := newCooccurrenceNetworkPoolMutation(c.config, OpDelete)
	return &CooccurrenceNetworkPoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CooccurrenceNetworkPoolClient) DeleteOne(cnp *CooccurrenceNetworkPool) *CooccurrenceNetworkPoolDeleteOne {
	return c.DeleteOneID(cnp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CooccurrenceNetworkPoolClient) DeleteOneID(id uuid.UUID) *CooccurrenceNetworkPoolDeleteOne {
	builder := c.Delete().Where(cooccurrencenetworkpool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CooccurrenceNetworkPoolDeleteOne{builder}
}

// Query returns a query builder for CooccurrenceNetworkPool.
func (c *CooccurrenceNetworkPoolClient) Query() *CooccurrenceNetworkPoolQuery {
	return &CooccurrenceNetworkPoolQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a CooccurrenceNetworkPool entity by its id.
func (c *CooccurrenceNetworkPoolClient) Get(ctx context.Context, id uuid.UUID) (*CooccurrenceNetworkPool, error) {
	return c.Query().Where(cooccurrencenetworkpool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CooccurrenceNetworkPoolClient) GetX(ctx context.Context, id uuid.UUID) *CooccurrenceNetworkPool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CooccurrenceNetworkPoolClient) Hooks() []Hook {
	return c.hooks.CooccurrenceNetworkPool
}

// Interceptors returns the client interceptors.
func (c *CooccurrenceNetworkPoolClient) Interceptors() []Interceptor {
	return c.inters.CooccurrenceNetworkPool
}

func (c *CooccurrenceNetworkPoolClient) mutate(ctx context.Context, m *CooccurrenceNetworkPoolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CooccurrenceNetworkPoolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CooccurrenceNetworkPoolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CooccurrenceNetworkPoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CooccurrenceNetworkPoolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CooccurrenceNetworkPool mutation op: %q", m.Op())
	}
}

// FeedAuditTrailActionClient is a client for the FeedAuditTrailAction schema.
type FeedAuditTrailActionClient struct {
	config
}

// NewFeedAuditTrailActionClient returns a client for the FeedAuditTrailAction from the given config.
func NewFeedAuditTrailActionClient(c config) *FeedAuditTrailActionClient {
	return &FeedAuditTrailActionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feedaudittrailaction.Hooks(f(g(h())))`.
func (c *FeedAuditTrailActionClient) Use(hooks ...Hook) {
	c.hooks.FeedAuditTrailAction = append(c.hooks.FeedAuditTrailAction, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feedaudittrailaction.Intercept(f(g(h())))`.
func (c *FeedAuditTrailActionClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeedAuditTrailAction = append(c.inters.FeedAuditTrailAction, interceptors...)
}

// Create returns a builder for creating a FeedAuditTrailAction entity.
func (c *FeedAuditTrailActionClient) Create() *FeedAuditTrailActionCreate {
	mutation := newFeedAuditTrailActionMutation(c.config, OpCreate)
	return &FeedAuditTrailActionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeedAuditTrailAction entities.
func (c *FeedAuditTrailActionClient) CreateBulk(builders ...*FeedAuditTrailActionCreate) *FeedAuditTrailActionCreateBulk {
	return &FeedAuditTrailActionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedAuditTrailAction.
func (c *FeedAuditTrailActionClient) Update() *FeedAuditTrailActionUpdate {
	mutation := newFeedAuditTrailActionMutation(c.config, OpUpdate)
	return &FeedAuditTrailActionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedAuditTrailActionClient) UpdateOne(fata *FeedAuditTrailAction) *FeedAuditTrailActionUpdateOne {
	mutation := newFeedAuditTrailActionMutation(c.config, OpUpdateOne, withFeedAuditTrailAction(fata))
	return &FeedAuditTrailActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedAuditTrailActionClient) UpdateOneID(id int) *FeedAuditTrailActionUpdateOne {
	mutation := newFeedAuditTrailActionMutation(c.config, OpUpdateOne, withFeedAuditTrailActionID(id))
	return &FeedAuditTrailActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedAuditTrailAction.
func (c *FeedAuditTrailActionClient) Delete() *FeedAuditTrailActionDelete {
	mutation := newFeedAuditTrailActionMutation(c.config, OpDelete)
	return &FeedAuditTrailActionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedAuditTrailActionClient) DeleteOne(fata *FeedAuditTrailAction) *FeedAuditTrailActionDeleteOne {
	return c.DeleteOneID(fata.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedAuditTrailActionClient) DeleteOneID(id int) *FeedAuditTrailActionDeleteOne {
	builder := c.Delete().Where(feedaudittrailaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedAuditTrailActionDeleteOne{builder}
}

// Query returns a query builder for FeedAuditTrailAction.
func (c *FeedAuditTrailActionClient) Query() *FeedAuditTrailActionQuery {
	return &FeedAuditTrailActionQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a FeedAuditTrailAction entity by its id.
func (c *FeedAuditTrailActionClient) Get(ctx context.Context, id int) (*FeedAuditTrailAction, error) {
	return c.Query().Where(feedaudittrailaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedAuditTrailActionClient) GetX(ctx context.Context, id int) *FeedAuditTrailAction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FeedAuditTrailActionClient) Hooks() []Hook {
	return c.hooks.FeedAuditTrailAction
}

// Interceptors returns the client interceptors.
func (c *FeedAuditTrailActionClient) Interceptors() []Interceptor {
	return c.inters.FeedAuditTrailAction
}

func (c *FeedAuditTrailActionClient) mutate(ctx context.Context, m *FeedAuditTrailActionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedAuditTrailActionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedAuditTrailActionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedAuditTrailActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedAuditTrailActionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeedAuditTrailAction mutation op: %q", m.Op())
	}
}

// FeedAuditTrailLogClient is a client for the FeedAuditTrailLog schema.
type FeedAuditTrailLogClient struct {
	config
}

// NewFeedAuditTrailLogClient returns a client for the FeedAuditTrailLog from the given config.
func NewFeedAuditTrailLogClient(c config) *FeedAuditTrailLogClient {
	return &FeedAuditTrailLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feedaudittraillog.Hooks(f(g(h())))`.
func (c *FeedAuditTrailLogClient) Use(hooks ...Hook) {
	c.hooks.FeedAuditTrailLog = append(c.hooks.FeedAuditTrailLog, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feedaudittraillog.Intercept(f(g(h())))`.
func (c *FeedAuditTrailLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeedAuditTrailLog = append(c.inters.FeedAuditTrailLog, interceptors...)
}

// Create returns a builder for creating a FeedAuditTrailLog entity.
func (c *FeedAuditTrailLogClient) Create() *FeedAuditTrailLogCreate {
	mutation := newFeedAuditTrailLogMutation(c.config, OpCreate)
	return &FeedAuditTrailLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeedAuditTrailLog entities.
func (c *FeedAuditTrailLogClient) CreateBulk(builders ...*FeedAuditTrailLogCreate) *FeedAuditTrailLogCreateBulk {
	return &FeedAuditTrailLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedAuditTrailLog.
func (c *FeedAuditTrailLogClient) Update() *FeedAuditTrailLogUpdate {
	mutation := newFeedAuditTrailLogMutation(c.config, OpUpdate)
	return &FeedAuditTrailLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedAuditTrailLogClient) UpdateOne(fatl *FeedAuditTrailLog) *FeedAuditTrailLogUpdateOne {
	mutation := newFeedAuditTrailLogMutation(c.config, OpUpdateOne, withFeedAuditTrailLog(fatl))
	return &FeedAuditTrailLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedAuditTrailLogClient) UpdateOneID(id int) *FeedAuditTrailLogUpdateOne {
	mutation := newFeedAuditTrailLogMutation(c.config, OpUpdateOne, withFeedAuditTrailLogID(id))
	return &FeedAuditTrailLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedAuditTrailLog.
func (c *FeedAuditTrailLogClient) Delete() *FeedAuditTrailLogDelete {
	mutation := newFeedAuditTrailLogMutation(c.config, OpDelete)
	return &FeedAuditTrailLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedAuditTrailLogClient) DeleteOne(fatl *FeedAuditTrailLog) *FeedAuditTrailLogDeleteOne {
	return c.DeleteOneID(fatl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedAuditTrailLogClient) DeleteOneID(id int) *FeedAuditTrailLogDeleteOne {
	builder := c.Delete().Where(feedaudittraillog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedAuditTrailLogDeleteOne{builder}
}

// Query returns a query builder for FeedAuditTrailLog.
func (c *FeedAuditTrailLogClient) Query() *FeedAuditTrailLogQuery {
	return &FeedAuditTrailLogQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a FeedAuditTrailLog entity by its id.
func (c *FeedAuditTrailLogClient) Get(ctx context.Context, id int) (*FeedAuditTrailLog, error) {
	return c.Query().Where(feedaudittraillog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedAuditTrailLogClient) GetX(ctx context.Context, id int) *FeedAuditTrailLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAction queries the action edge of a FeedAuditTrailLog.
func (c *FeedAuditTrailLogClient) QueryAction(fatl *FeedAuditTrailLog) *FeedAuditTrailActionQuery {
	query := (&FeedAuditTrailActionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fatl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedaudittraillog.Table, feedaudittraillog.FieldID, id),
			sqlgraph.To(feedaudittrailaction.Table, feedaudittrailaction.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedaudittraillog.ActionTable, feedaudittraillog.ActionColumn),
		)
		fromV = sqlgraph.Neighbors(fatl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedAuditTrailLogClient) Hooks() []Hook {
	return c.hooks.FeedAuditTrailLog
}

// Interceptors returns the client interceptors.
func (c *FeedAuditTrailLogClient) Interceptors() []Interceptor {
	return c.inters.FeedAuditTrailLog
}

func (c *FeedAuditTrailLogClient) mutate(ctx context.Context, m *FeedAuditTrailLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedAuditTrailLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedAuditTrailLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedAuditTrailLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedAuditTrailLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeedAuditTrailLog mutation op: %q", m.Op())
	}
}

// FeedsClient is a client for the Feeds schema.
type FeedsClient struct {
	config
}

// NewFeedsClient returns a client for the Feeds from the given config.
func NewFeedsClient(c config) *FeedsClient {
	return &FeedsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feeds.Hooks(f(g(h())))`.
func (c *FeedsClient) Use(hooks ...Hook) {
	c.hooks.Feeds = append(c.hooks.Feeds, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feeds.Intercept(f(g(h())))`.
func (c *FeedsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Feeds = append(c.inters.Feeds, interceptors...)
}

// Create returns a builder for creating a Feeds entity.
func (c *FeedsClient) Create() *FeedsCreate {
	mutation := newFeedsMutation(c.config, OpCreate)
	return &FeedsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Feeds entities.
func (c *FeedsClient) CreateBulk(builders ...*FeedsCreate) *FeedsCreateBulk {
	return &FeedsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Feeds.
func (c *FeedsClient) Update() *FeedsUpdate {
	mutation := newFeedsMutation(c.config, OpUpdate)
	return &FeedsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedsClient) UpdateOne(f *Feeds) *FeedsUpdateOne {
	mutation := newFeedsMutation(c.config, OpUpdateOne, withFeeds(f))
	return &FeedsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedsClient) UpdateOneID(id uuid.UUID) *FeedsUpdateOne {
	mutation := newFeedsMutation(c.config, OpUpdateOne, withFeedsID(id))
	return &FeedsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Feeds.
func (c *FeedsClient) Delete() *FeedsDelete {
	mutation := newFeedsMutation(c.config, OpDelete)
	return &FeedsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedsClient) DeleteOne(f *Feeds) *FeedsDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedsClient) DeleteOneID(id uuid.UUID) *FeedsDeleteOne {
	builder := c.Delete().Where(feeds.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedsDeleteOne{builder}
}

// Query returns a query builder for Feeds.
func (c *FeedsClient) Query() *FeedsQuery {
	return &FeedsQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a Feeds entity by its id.
func (c *FeedsClient) Get(ctx context.Context, id uuid.UUID) (*Feeds, error) {
	return c.Query().Where(feeds.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedsClient) GetX(ctx context.Context, id uuid.UUID) *Feeds {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FeedsClient) Hooks() []Hook {
	return c.hooks.Feeds
}

// Interceptors returns the client interceptors.
func (c *FeedsClient) Interceptors() []Interceptor {
	return c.inters.Feeds
}

func (c *FeedsClient) mutate(ctx context.Context, m *FeedsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Feeds mutation op: %q", m.Op())
	}
}

// FollowListsClient is a client for the FollowLists schema.
type FollowListsClient struct {
	config
}

// NewFollowListsClient returns a client for the FollowLists from the given config.
func NewFollowListsClient(c config) *FollowListsClient {
	return &FollowListsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `followlists.Hooks(f(g(h())))`.
func (c *FollowListsClient) Use(hooks ...Hook) {
	c.hooks.FollowLists = append(c.hooks.FollowLists, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `followlists.Intercept(f(g(h())))`.
func (c *FollowListsClient) Intercept(interceptors ...Interceptor) {
	c.inters.FollowLists = append(c.inters.FollowLists, interceptors...)
}

// Create returns a builder for creating a FollowLists entity.
func (c *FollowListsClient) Create() *FollowListsCreate {
	mutation := newFollowListsMutation(c.config, OpCreate)
	return &FollowListsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FollowLists entities.
func (c *FollowListsClient) CreateBulk(builders ...*FollowListsCreate) *FollowListsCreateBulk {
	return &FollowListsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FollowLists.
func (c *FollowListsClient) Update() *FollowListsUpdate {
	mutation := newFollowListsMutation(c.config, OpUpdate)
	return &FollowListsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FollowListsClient) UpdateOne(fl *FollowLists) *FollowListsUpdateOne {
	mutation := newFollowListsMutation(c.config, OpUpdateOne, withFollowLists(fl))
	return &FollowListsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FollowListsClient) UpdateOneID(id int) *FollowListsUpdateOne {
	mutation := newFollowListsMutation(c.config, OpUpdateOne, withFollowListsID(id))
	return &FollowListsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FollowLists.
func (c *FollowListsClient) Delete() *FollowListsDelete {
	mutation := newFollowListsMutation(c.config, OpDelete)
	return &FollowListsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FollowListsClient) DeleteOne(fl *FollowLists) *FollowListsDeleteOne {
	return c.DeleteOneID(fl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FollowListsClient) DeleteOneID(id int) *FollowListsDeleteOne {
	builder := c.Delete().Where(followlists.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FollowListsDeleteOne{builder}
}

// Query returns a query builder for FollowLists.
func (c *FollowListsClient) Query() *FollowListsQuery {
	return &FollowListsQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a FollowLists entity by its id.
func (c *FollowListsClient) Get(ctx context.Context, id int) (*FollowLists, error) {
	return c.Query().Where(followlists.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FollowListsClient) GetX(ctx context.Context, id int) *FollowLists {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FollowListsClient) Hooks() []Hook {
	return c.hooks.FollowLists
}

// Interceptors returns the client interceptors.
func (c *FollowListsClient) Interceptors() []Interceptor {
	return c.inters.FollowLists
}

func (c *FollowListsClient) mutate(ctx context.Context, m *FollowListsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FollowListsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FollowListsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FollowListsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FollowListsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FollowLists mutation op: %q", m.Op())
	}
}

// UsersClient is a client for the Users schema.
type UsersClient struct {
	config
}

// NewUsersClient returns a client for the Users from the given config.
func NewUsersClient(c config) *UsersClient {
	return &UsersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `users.Hooks(f(g(h())))`.
func (c *UsersClient) Use(hooks ...Hook) {
	c.hooks.Users = append(c.hooks.Users, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `users.Intercept(f(g(h())))`.
func (c *UsersClient) Intercept(interceptors ...Interceptor) {
	c.inters.Users = append(c.inters.Users, interceptors...)
}

// Create returns a builder for creating a Users entity.
func (c *UsersClient) Create() *UsersCreate {
	mutation := newUsersMutation(c.config, OpCreate)
	return &UsersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Users entities.
func (c *UsersClient) CreateBulk(builders ...*UsersCreate) *UsersCreateBulk {
	return &UsersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Users.
func (c *UsersClient) Update() *UsersUpdate {
	mutation := newUsersMutation(c.config, OpUpdate)
	return &UsersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsersClient) UpdateOne(u *Users) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsers(u))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsersClient) UpdateOneID(id uuid.UUID) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsersID(id))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Users.
func (c *UsersClient) Delete() *UsersDelete {
	mutation := newUsersMutation(c.config, OpDelete)
	return &UsersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UsersClient) DeleteOne(u *Users) *UsersDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UsersClient) DeleteOneID(id uuid.UUID) *UsersDeleteOne {
	builder := c.Delete().Where(users.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsersDeleteOne{builder}
}

// Query returns a query builder for Users.
func (c *UsersClient) Query() *UsersQuery {
	return &UsersQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a Users entity by its id.
func (c *UsersClient) Get(ctx context.Context, id uuid.UUID) (*Users, error) {
	return c.Query().Where(users.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsersClient) GetX(ctx context.Context, id uuid.UUID) *Users {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UsersClient) Hooks() []Hook {
	return c.hooks.Users
}

// Interceptors returns the client interceptors.
func (c *UsersClient) Interceptors() []Interceptor {
	return c.inters.Users
}

func (c *UsersClient) mutate(ctx context.Context, m *UsersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UsersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UsersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UsersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Users mutation op: %q", m.Op())
	}
}
