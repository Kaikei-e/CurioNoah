// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"insightstream/ent/feedaudittrailaction"
	"insightstream/ent/feedaudittraillog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeedAuditTrailLogCreate is the builder for creating a FeedAuditTrailLog entity.
type FeedAuditTrailLogCreate struct {
	config
	mutation *FeedAuditTrailLogMutation
	hooks    []Hook
}

// SetUpdatedAt sets the "updated_at" field.
func (fatlc *FeedAuditTrailLogCreate) SetUpdatedAt(t time.Time) *FeedAuditTrailLogCreate {
	fatlc.mutation.SetUpdatedAt(t)
	return fatlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fatlc *FeedAuditTrailLogCreate) SetNillableUpdatedAt(t *time.Time) *FeedAuditTrailLogCreate {
	if t != nil {
		fatlc.SetUpdatedAt(*t)
	}
	return fatlc
}

// SetID sets the "id" field.
func (fatlc *FeedAuditTrailLogCreate) SetID(i int) *FeedAuditTrailLogCreate {
	fatlc.mutation.SetID(i)
	return fatlc
}

// SetActionID sets the "action" edge to the FeedAuditTrailAction entity by ID.
func (fatlc *FeedAuditTrailLogCreate) SetActionID(id int) *FeedAuditTrailLogCreate {
	fatlc.mutation.SetActionID(id)
	return fatlc
}

// SetAction sets the "action" edge to the FeedAuditTrailAction entity.
func (fatlc *FeedAuditTrailLogCreate) SetAction(f *FeedAuditTrailAction) *FeedAuditTrailLogCreate {
	return fatlc.SetActionID(f.ID)
}

// Mutation returns the FeedAuditTrailLogMutation object of the builder.
func (fatlc *FeedAuditTrailLogCreate) Mutation() *FeedAuditTrailLogMutation {
	return fatlc.mutation
}

// Save creates the FeedAuditTrailLog in the database.
func (fatlc *FeedAuditTrailLogCreate) Save(ctx context.Context) (*FeedAuditTrailLog, error) {
	fatlc.defaults()
	return withHooks[*FeedAuditTrailLog, FeedAuditTrailLogMutation](ctx, fatlc.sqlSave, fatlc.mutation, fatlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fatlc *FeedAuditTrailLogCreate) SaveX(ctx context.Context) *FeedAuditTrailLog {
	v, err := fatlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fatlc *FeedAuditTrailLogCreate) Exec(ctx context.Context) error {
	_, err := fatlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fatlc *FeedAuditTrailLogCreate) ExecX(ctx context.Context) {
	if err := fatlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fatlc *FeedAuditTrailLogCreate) defaults() {
	if _, ok := fatlc.mutation.UpdatedAt(); !ok {
		v := feedaudittraillog.DefaultUpdatedAt()
		fatlc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fatlc *FeedAuditTrailLogCreate) check() error {
	if _, ok := fatlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FeedAuditTrailLog.updated_at"`)}
	}
	if _, ok := fatlc.mutation.ActionID(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required edge "FeedAuditTrailLog.action"`)}
	}
	return nil
}

func (fatlc *FeedAuditTrailLogCreate) sqlSave(ctx context.Context) (*FeedAuditTrailLog, error) {
	if err := fatlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fatlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fatlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	fatlc.mutation.id = &_node.ID
	fatlc.mutation.done = true
	return _node, nil
}

func (fatlc *FeedAuditTrailLogCreate) createSpec() (*FeedAuditTrailLog, *sqlgraph.CreateSpec) {
	var (
		_node = &FeedAuditTrailLog{config: fatlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: feedaudittraillog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: feedaudittraillog.FieldID,
			},
		}
	)
	if id, ok := fatlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fatlc.mutation.UpdatedAt(); ok {
		_spec.SetField(feedaudittraillog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := fatlc.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedaudittraillog.ActionTable,
			Columns: []string{feedaudittraillog.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feedaudittrailaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.action_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FeedAuditTrailLogCreateBulk is the builder for creating many FeedAuditTrailLog entities in bulk.
type FeedAuditTrailLogCreateBulk struct {
	config
	builders []*FeedAuditTrailLogCreate
}

// Save creates the FeedAuditTrailLog entities in the database.
func (fatlcb *FeedAuditTrailLogCreateBulk) Save(ctx context.Context) ([]*FeedAuditTrailLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fatlcb.builders))
	nodes := make([]*FeedAuditTrailLog, len(fatlcb.builders))
	mutators := make([]Mutator, len(fatlcb.builders))
	for i := range fatlcb.builders {
		func(i int, root context.Context) {
			builder := fatlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeedAuditTrailLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fatlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fatlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fatlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fatlcb *FeedAuditTrailLogCreateBulk) SaveX(ctx context.Context) []*FeedAuditTrailLog {
	v, err := fatlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fatlcb *FeedAuditTrailLogCreateBulk) Exec(ctx context.Context) error {
	_, err := fatlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fatlcb *FeedAuditTrailLogCreateBulk) ExecX(ctx context.Context) {
	if err := fatlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
