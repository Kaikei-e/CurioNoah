// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"insightstream/ent/feedaudittrailaction"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// FeedAuditTrailAction is the model entity for the FeedAuditTrailAction schema.
type FeedAuditTrailAction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeedAuditTrailAction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feedaudittrailaction.FieldID:
			values[i] = new(sql.NullInt64)
		case feedaudittrailaction.FieldAction:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FeedAuditTrailAction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeedAuditTrailAction fields.
func (fata *FeedAuditTrailAction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feedaudittrailaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fata.ID = int(value.Int64)
		case feedaudittrailaction.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				fata.Action = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FeedAuditTrailAction.
// Note that you need to call FeedAuditTrailAction.Unwrap() before calling this method if this FeedAuditTrailAction
// was returned from a transaction, and the transaction was committed or rolled back.
func (fata *FeedAuditTrailAction) Update() *FeedAuditTrailActionUpdateOne {
	return (&FeedAuditTrailActionClient{config: fata.config}).UpdateOne(fata)
}

// Unwrap unwraps the FeedAuditTrailAction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fata *FeedAuditTrailAction) Unwrap() *FeedAuditTrailAction {
	_tx, ok := fata.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeedAuditTrailAction is not a transactional entity")
	}
	fata.config.driver = _tx.drv
	return fata
}

// String implements the fmt.Stringer.
func (fata *FeedAuditTrailAction) String() string {
	var builder strings.Builder
	builder.WriteString("FeedAuditTrailAction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fata.ID))
	builder.WriteString("action=")
	builder.WriteString(fata.Action)
	builder.WriteByte(')')
	return builder.String()
}

// FeedAuditTrailActions is a parsable slice of FeedAuditTrailAction.
type FeedAuditTrailActions []*FeedAuditTrailAction

func (fata FeedAuditTrailActions) config(cfg config) {
	for _i := range fata {
		fata[_i].config = cfg
	}
}
