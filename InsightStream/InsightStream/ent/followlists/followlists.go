// Code generated by ent, DO NOT EDIT.

package followlists

import (
	"insightstream/domain/baseFeeds"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the followlists type in the database.
	Label = "follow_lists"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldXMLVersion holds the string denoting the xml_version field in the database.
	FieldXMLVersion = "xml_version"
	// FieldRssVersion holds the string denoting the rss_version field in the database.
	FieldRssVersion = "rss_version"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// FieldLinks holds the string denoting the links field in the database.
	FieldLinks = "links"
	// FieldItemDescription holds the string denoting the item_description field in the database.
	FieldItemDescription = "item_description"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldDtCreated holds the string denoting the dt_created field in the database.
	FieldDtCreated = "dt_created"
	// FieldDtUpdated holds the string denoting the dt_updated field in the database.
	FieldDtUpdated = "dt_updated"
	// FieldDtLastInserted holds the string denoting the dt_last_inserted field in the database.
	FieldDtLastInserted = "dt_last_inserted"
	// FieldFeedCategory holds the string denoting the feed_category field in the database.
	FieldFeedCategory = "feed_category"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldIsFavorite holds the string denoting the is_favorite field in the database.
	FieldIsFavorite = "is_favorite"
	// FieldIsRead holds the string denoting the is_read field in the database.
	FieldIsRead = "is_read"
	// FieldIsUpdated holds the string denoting the is_updated field in the database.
	FieldIsUpdated = "is_updated"
	// Table holds the table name of the followlists in the database.
	Table = "follow_lists"
)

// Columns holds all SQL columns for followlists fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldXMLVersion,
	FieldRssVersion,
	FieldURL,
	FieldTitle,
	FieldDescription,
	FieldLink,
	FieldLinks,
	FieldItemDescription,
	FieldLanguage,
	FieldDtCreated,
	FieldDtUpdated,
	FieldDtLastInserted,
	FieldFeedCategory,
	FieldIsActive,
	FieldIsFavorite,
	FieldIsRead,
	FieldIsUpdated,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUUID holds the default value on creation for the "uuid" field.
	DefaultUUID func() uuid.UUID
	// DefaultXMLVersion holds the default value on creation for the "xml_version" field.
	DefaultXMLVersion int8
	// DefaultRssVersion holds the default value on creation for the "rss_version" field.
	DefaultRssVersion int8
	// DefaultURL holds the default value on creation for the "url" field.
	DefaultURL string
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// DefaultTitle holds the default value on creation for the "title" field.
	DefaultTitle string
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultLink holds the default value on creation for the "link" field.
	DefaultLink string
	// DefaultLinks holds the default value on creation for the "links" field.
	DefaultLinks baseFeeds.FeedLink
	// DefaultLanguage holds the default value on creation for the "language" field.
	DefaultLanguage string
	// LanguageValidator is a validator for the "language" field. It is called by the builders before save.
	LanguageValidator func(string) error
	// DefaultDtCreated holds the default value on creation for the "dt_created" field.
	DefaultDtCreated time.Time
	// DefaultDtUpdated holds the default value on creation for the "dt_updated" field.
	DefaultDtUpdated time.Time
	// DefaultDtLastInserted holds the default value on creation for the "dt_last_inserted" field.
	DefaultDtLastInserted time.Time
	// DefaultFeedCategory holds the default value on creation for the "feed_category" field.
	DefaultFeedCategory int
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultIsFavorite holds the default value on creation for the "is_favorite" field.
	DefaultIsFavorite bool
	// DefaultIsRead holds the default value on creation for the "is_read" field.
	DefaultIsRead bool
	// DefaultIsUpdated holds the default value on creation for the "is_updated" field.
	DefaultIsUpdated bool
)

// OrderOption defines the ordering options for the FollowLists queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUUID orders the results by the uuid field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByXMLVersion orders the results by the xml_version field.
func ByXMLVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXMLVersion, opts...).ToFunc()
}

// ByRssVersion orders the results by the rss_version field.
func ByRssVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRssVersion, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByDtCreated orders the results by the dt_created field.
func ByDtCreated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDtCreated, opts...).ToFunc()
}

// ByDtUpdated orders the results by the dt_updated field.
func ByDtUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDtUpdated, opts...).ToFunc()
}

// ByDtLastInserted orders the results by the dt_last_inserted field.
func ByDtLastInserted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDtLastInserted, opts...).ToFunc()
}

// ByFeedCategory orders the results by the feed_category field.
func ByFeedCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeedCategory, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByIsFavorite orders the results by the is_favorite field.
func ByIsFavorite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsFavorite, opts...).ToFunc()
}

// ByIsRead orders the results by the is_read field.
func ByIsRead(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRead, opts...).ToFunc()
}

// ByIsUpdated orders the results by the is_updated field.
func ByIsUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsUpdated, opts...).ToFunc()
}
