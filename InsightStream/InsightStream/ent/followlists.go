// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"insightstream/domain/baseFeeds"
	"insightstream/ent/followlists"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// FollowLists is the model entity for the FollowLists schema.
type FollowLists struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// XMLVersion holds the value of the "xml_version" field.
	XMLVersion int8 `json:"xml_version,omitempty"`
	// RssVersion holds the value of the "rss_version" field.
	RssVersion int8 `json:"rss_version,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// Links holds the value of the "links" field.
	Links baseFeeds.FeedLink `json:"links,omitempty"`
	// ItemDescription holds the value of the "item_description" field.
	ItemDescription []baseFeeds.FeedItem `json:"item_description,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// DtCreated holds the value of the "dt_created" field.
	DtCreated time.Time `json:"dt_created,omitempty"`
	// DtUpdated holds the value of the "dt_updated" field.
	DtUpdated time.Time `json:"dt_updated,omitempty"`
	// DtLastInserted holds the value of the "dt_last_inserted" field.
	DtLastInserted time.Time `json:"dt_last_inserted,omitempty"`
	// FeedCategory holds the value of the "feed_category" field.
	FeedCategory int `json:"feed_category,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// IsFavorite holds the value of the "is_favorite" field.
	IsFavorite bool `json:"is_favorite,omitempty"`
	// IsRead holds the value of the "is_read" field.
	IsRead bool `json:"is_read,omitempty"`
	// IsUpdated holds the value of the "is_updated" field.
	IsUpdated    bool `json:"is_updated,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FollowLists) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case followlists.FieldLinks, followlists.FieldItemDescription:
			values[i] = new([]byte)
		case followlists.FieldIsActive, followlists.FieldIsFavorite, followlists.FieldIsRead, followlists.FieldIsUpdated:
			values[i] = new(sql.NullBool)
		case followlists.FieldID, followlists.FieldXMLVersion, followlists.FieldRssVersion, followlists.FieldFeedCategory:
			values[i] = new(sql.NullInt64)
		case followlists.FieldURL, followlists.FieldTitle, followlists.FieldDescription, followlists.FieldLink, followlists.FieldLanguage:
			values[i] = new(sql.NullString)
		case followlists.FieldDtCreated, followlists.FieldDtUpdated, followlists.FieldDtLastInserted:
			values[i] = new(sql.NullTime)
		case followlists.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FollowLists fields.
func (fl *FollowLists) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case followlists.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fl.ID = int(value.Int64)
		case followlists.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				fl.UUID = *value
			}
		case followlists.FieldXMLVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field xml_version", values[i])
			} else if value.Valid {
				fl.XMLVersion = int8(value.Int64)
			}
		case followlists.FieldRssVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rss_version", values[i])
			} else if value.Valid {
				fl.RssVersion = int8(value.Int64)
			}
		case followlists.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				fl.URL = value.String
			}
		case followlists.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				fl.Title = value.String
			}
		case followlists.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				fl.Description = value.String
			}
		case followlists.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				fl.Link = value.String
			}
		case followlists.FieldLinks:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field links", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &fl.Links); err != nil {
					return fmt.Errorf("unmarshal field links: %w", err)
				}
			}
		case followlists.FieldItemDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field item_description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &fl.ItemDescription); err != nil {
					return fmt.Errorf("unmarshal field item_description: %w", err)
				}
			}
		case followlists.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				fl.Language = value.String
			}
		case followlists.FieldDtCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dt_created", values[i])
			} else if value.Valid {
				fl.DtCreated = value.Time
			}
		case followlists.FieldDtUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dt_updated", values[i])
			} else if value.Valid {
				fl.DtUpdated = value.Time
			}
		case followlists.FieldDtLastInserted:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dt_last_inserted", values[i])
			} else if value.Valid {
				fl.DtLastInserted = value.Time
			}
		case followlists.FieldFeedCategory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feed_category", values[i])
			} else if value.Valid {
				fl.FeedCategory = int(value.Int64)
			}
		case followlists.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				fl.IsActive = value.Bool
			}
		case followlists.FieldIsFavorite:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_favorite", values[i])
			} else if value.Valid {
				fl.IsFavorite = value.Bool
			}
		case followlists.FieldIsRead:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_read", values[i])
			} else if value.Valid {
				fl.IsRead = value.Bool
			}
		case followlists.FieldIsUpdated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_updated", values[i])
			} else if value.Valid {
				fl.IsUpdated = value.Bool
			}
		default:
			fl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FollowLists.
// This includes values selected through modifiers, order, etc.
func (fl *FollowLists) Value(name string) (ent.Value, error) {
	return fl.selectValues.Get(name)
}

// Update returns a builder for updating this FollowLists.
// Note that you need to call FollowLists.Unwrap() before calling this method if this FollowLists
// was returned from a transaction, and the transaction was committed or rolled back.
func (fl *FollowLists) Update() *FollowListsUpdateOne {
	return NewFollowListsClient(fl.config).UpdateOne(fl)
}

// Unwrap unwraps the FollowLists entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fl *FollowLists) Unwrap() *FollowLists {
	_tx, ok := fl.config.driver.(*txDriver)
	if !ok {
		panic("ent: FollowLists is not a transactional entity")
	}
	fl.config.driver = _tx.drv
	return fl
}

// String implements the fmt.Stringer.
func (fl *FollowLists) String() string {
	var builder strings.Builder
	builder.WriteString("FollowLists(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fl.ID))
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", fl.UUID))
	builder.WriteString(", ")
	builder.WriteString("xml_version=")
	builder.WriteString(fmt.Sprintf("%v", fl.XMLVersion))
	builder.WriteString(", ")
	builder.WriteString("rss_version=")
	builder.WriteString(fmt.Sprintf("%v", fl.RssVersion))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(fl.URL)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(fl.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fl.Description)
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(fl.Link)
	builder.WriteString(", ")
	builder.WriteString("links=")
	builder.WriteString(fmt.Sprintf("%v", fl.Links))
	builder.WriteString(", ")
	builder.WriteString("item_description=")
	builder.WriteString(fmt.Sprintf("%v", fl.ItemDescription))
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(fl.Language)
	builder.WriteString(", ")
	builder.WriteString("dt_created=")
	builder.WriteString(fl.DtCreated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("dt_updated=")
	builder.WriteString(fl.DtUpdated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("dt_last_inserted=")
	builder.WriteString(fl.DtLastInserted.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("feed_category=")
	builder.WriteString(fmt.Sprintf("%v", fl.FeedCategory))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", fl.IsActive))
	builder.WriteString(", ")
	builder.WriteString("is_favorite=")
	builder.WriteString(fmt.Sprintf("%v", fl.IsFavorite))
	builder.WriteString(", ")
	builder.WriteString("is_read=")
	builder.WriteString(fmt.Sprintf("%v", fl.IsRead))
	builder.WriteString(", ")
	builder.WriteString("is_updated=")
	builder.WriteString(fmt.Sprintf("%v", fl.IsUpdated))
	builder.WriteByte(')')
	return builder.String()
}

// FollowListsSlice is a parsable slice of FollowLists.
type FollowListsSlice []*FollowLists
