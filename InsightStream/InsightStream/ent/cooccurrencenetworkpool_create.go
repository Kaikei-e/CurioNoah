// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"insightstream/ent/cooccurrencenetworkpool"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CooccurrenceNetworkPoolCreate is the builder for creating a CooccurrenceNetworkPool entity.
type CooccurrenceNetworkPoolCreate struct {
	config
	mutation *CooccurrenceNetworkPoolMutation
	hooks    []Hook
}

// SetSiteURL sets the "site_url" field.
func (cnpc *CooccurrenceNetworkPoolCreate) SetSiteURL(s string) *CooccurrenceNetworkPoolCreate {
	cnpc.mutation.SetSiteURL(s)
	return cnpc
}

// SetTitles sets the "titles" field.
func (cnpc *CooccurrenceNetworkPoolCreate) SetTitles(s string) *CooccurrenceNetworkPoolCreate {
	cnpc.mutation.SetTitles(s)
	return cnpc
}

// SetNillableTitles sets the "titles" field if the given value is not nil.
func (cnpc *CooccurrenceNetworkPoolCreate) SetNillableTitles(s *string) *CooccurrenceNetworkPoolCreate {
	if s != nil {
		cnpc.SetTitles(*s)
	}
	return cnpc
}

// SetDescriptions sets the "descriptions" field.
func (cnpc *CooccurrenceNetworkPoolCreate) SetDescriptions(s []string) *CooccurrenceNetworkPoolCreate {
	cnpc.mutation.SetDescriptions(s)
	return cnpc
}

// SetID sets the "id" field.
func (cnpc *CooccurrenceNetworkPoolCreate) SetID(u uuid.UUID) *CooccurrenceNetworkPoolCreate {
	cnpc.mutation.SetID(u)
	return cnpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cnpc *CooccurrenceNetworkPoolCreate) SetNillableID(u *uuid.UUID) *CooccurrenceNetworkPoolCreate {
	if u != nil {
		cnpc.SetID(*u)
	}
	return cnpc
}

// Mutation returns the CooccurrenceNetworkPoolMutation object of the builder.
func (cnpc *CooccurrenceNetworkPoolCreate) Mutation() *CooccurrenceNetworkPoolMutation {
	return cnpc.mutation
}

// Save creates the CooccurrenceNetworkPool in the database.
func (cnpc *CooccurrenceNetworkPoolCreate) Save(ctx context.Context) (*CooccurrenceNetworkPool, error) {
	cnpc.defaults()
	return withHooks[*CooccurrenceNetworkPool, CooccurrenceNetworkPoolMutation](ctx, cnpc.sqlSave, cnpc.mutation, cnpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cnpc *CooccurrenceNetworkPoolCreate) SaveX(ctx context.Context) *CooccurrenceNetworkPool {
	v, err := cnpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cnpc *CooccurrenceNetworkPoolCreate) Exec(ctx context.Context) error {
	_, err := cnpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnpc *CooccurrenceNetworkPoolCreate) ExecX(ctx context.Context) {
	if err := cnpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cnpc *CooccurrenceNetworkPoolCreate) defaults() {
	if _, ok := cnpc.mutation.Titles(); !ok {
		v := cooccurrencenetworkpool.DefaultTitles
		cnpc.mutation.SetTitles(v)
	}
	if _, ok := cnpc.mutation.Descriptions(); !ok {
		v := cooccurrencenetworkpool.DefaultDescriptions
		cnpc.mutation.SetDescriptions(v)
	}
	if _, ok := cnpc.mutation.ID(); !ok {
		v := cooccurrencenetworkpool.DefaultID()
		cnpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cnpc *CooccurrenceNetworkPoolCreate) check() error {
	if _, ok := cnpc.mutation.SiteURL(); !ok {
		return &ValidationError{Name: "site_url", err: errors.New(`ent: missing required field "CooccurrenceNetworkPool.site_url"`)}
	}
	if v, ok := cnpc.mutation.SiteURL(); ok {
		if err := cooccurrencenetworkpool.SiteURLValidator(v); err != nil {
			return &ValidationError{Name: "site_url", err: fmt.Errorf(`ent: validator failed for field "CooccurrenceNetworkPool.site_url": %w`, err)}
		}
	}
	if _, ok := cnpc.mutation.Titles(); !ok {
		return &ValidationError{Name: "titles", err: errors.New(`ent: missing required field "CooccurrenceNetworkPool.titles"`)}
	}
	if v, ok := cnpc.mutation.Titles(); ok {
		if err := cooccurrencenetworkpool.TitlesValidator(v); err != nil {
			return &ValidationError{Name: "titles", err: fmt.Errorf(`ent: validator failed for field "CooccurrenceNetworkPool.titles": %w`, err)}
		}
	}
	if _, ok := cnpc.mutation.Descriptions(); !ok {
		return &ValidationError{Name: "descriptions", err: errors.New(`ent: missing required field "CooccurrenceNetworkPool.descriptions"`)}
	}
	return nil
}

func (cnpc *CooccurrenceNetworkPoolCreate) sqlSave(ctx context.Context) (*CooccurrenceNetworkPool, error) {
	if err := cnpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cnpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cnpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cnpc.mutation.id = &_node.ID
	cnpc.mutation.done = true
	return _node, nil
}

func (cnpc *CooccurrenceNetworkPoolCreate) createSpec() (*CooccurrenceNetworkPool, *sqlgraph.CreateSpec) {
	var (
		_node = &CooccurrenceNetworkPool{config: cnpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cooccurrencenetworkpool.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: cooccurrencenetworkpool.FieldID,
			},
		}
	)
	if id, ok := cnpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cnpc.mutation.SiteURL(); ok {
		_spec.SetField(cooccurrencenetworkpool.FieldSiteURL, field.TypeString, value)
		_node.SiteURL = value
	}
	if value, ok := cnpc.mutation.Titles(); ok {
		_spec.SetField(cooccurrencenetworkpool.FieldTitles, field.TypeString, value)
		_node.Titles = value
	}
	if value, ok := cnpc.mutation.Descriptions(); ok {
		_spec.SetField(cooccurrencenetworkpool.FieldDescriptions, field.TypeJSON, value)
		_node.Descriptions = value
	}
	return _node, _spec
}

// CooccurrenceNetworkPoolCreateBulk is the builder for creating many CooccurrenceNetworkPool entities in bulk.
type CooccurrenceNetworkPoolCreateBulk struct {
	config
	builders []*CooccurrenceNetworkPoolCreate
}

// Save creates the CooccurrenceNetworkPool entities in the database.
func (cnpcb *CooccurrenceNetworkPoolCreateBulk) Save(ctx context.Context) ([]*CooccurrenceNetworkPool, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cnpcb.builders))
	nodes := make([]*CooccurrenceNetworkPool, len(cnpcb.builders))
	mutators := make([]Mutator, len(cnpcb.builders))
	for i := range cnpcb.builders {
		func(i int, root context.Context) {
			builder := cnpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CooccurrenceNetworkPoolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cnpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cnpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cnpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cnpcb *CooccurrenceNetworkPoolCreateBulk) SaveX(ctx context.Context) []*CooccurrenceNetworkPool {
	v, err := cnpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cnpcb *CooccurrenceNetworkPoolCreateBulk) Exec(ctx context.Context) error {
	_, err := cnpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnpcb *CooccurrenceNetworkPoolCreateBulk) ExecX(ctx context.Context) {
	if err := cnpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
