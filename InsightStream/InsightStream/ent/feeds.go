// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"insightstream/ent/feeds"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Feeds is the model entity for the Feeds schema.
type Feeds struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SiteURL holds the value of the "site_url" field.
	SiteURL string `json:"site_url,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// FeedURL holds the value of the "feed_url" field.
	FeedURL string `json:"feed_url,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// DtCreated holds the value of the "dt_created" field.
	DtCreated time.Time `json:"dt_created,omitempty"`
	// DtUpdated holds the value of the "dt_updated" field.
	DtUpdated time.Time `json:"dt_updated,omitempty"`
	// Favorites holds the value of the "favorites" field.
	Favorites    int64 `json:"favorites,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Feeds) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feeds.FieldFavorites:
			values[i] = new(sql.NullInt64)
		case feeds.FieldSiteURL, feeds.FieldTitle, feeds.FieldDescription, feeds.FieldFeedURL, feeds.FieldLanguage:
			values[i] = new(sql.NullString)
		case feeds.FieldDtCreated, feeds.FieldDtUpdated:
			values[i] = new(sql.NullTime)
		case feeds.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Feeds fields.
func (f *Feeds) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feeds.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				f.ID = *value
			}
		case feeds.FieldSiteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field site_url", values[i])
			} else if value.Valid {
				f.SiteURL = value.String
			}
		case feeds.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				f.Title = value.String
			}
		case feeds.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				f.Description = value.String
			}
		case feeds.FieldFeedURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feed_url", values[i])
			} else if value.Valid {
				f.FeedURL = value.String
			}
		case feeds.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				f.Language = value.String
			}
		case feeds.FieldDtCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dt_created", values[i])
			} else if value.Valid {
				f.DtCreated = value.Time
			}
		case feeds.FieldDtUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dt_updated", values[i])
			} else if value.Valid {
				f.DtUpdated = value.Time
			}
		case feeds.FieldFavorites:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field favorites", values[i])
			} else if value.Valid {
				f.Favorites = value.Int64
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Feeds.
// This includes values selected through modifiers, order, etc.
func (f *Feeds) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// Update returns a builder for updating this Feeds.
// Note that you need to call Feeds.Unwrap() before calling this method if this Feeds
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Feeds) Update() *FeedsUpdateOne {
	return NewFeedsClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Feeds entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Feeds) Unwrap() *Feeds {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Feeds is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Feeds) String() string {
	var builder strings.Builder
	builder.WriteString("Feeds(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("site_url=")
	builder.WriteString(f.SiteURL)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(f.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(f.Description)
	builder.WriteString(", ")
	builder.WriteString("feed_url=")
	builder.WriteString(f.FeedURL)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(f.Language)
	builder.WriteString(", ")
	builder.WriteString("dt_created=")
	builder.WriteString(f.DtCreated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("dt_updated=")
	builder.WriteString(f.DtUpdated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("favorites=")
	builder.WriteString(fmt.Sprintf("%v", f.Favorites))
	builder.WriteByte(')')
	return builder.String()
}

// FeedsSlice is a parsable slice of Feeds.
type FeedsSlice []*Feeds
