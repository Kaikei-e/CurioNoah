// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"insightstream/ent/feedaudittrailaction"
	"insightstream/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeedAuditTrailActionUpdate is the builder for updating FeedAuditTrailAction entities.
type FeedAuditTrailActionUpdate struct {
	config
	hooks    []Hook
	mutation *FeedAuditTrailActionMutation
}

// Where appends a list predicates to the FeedAuditTrailActionUpdate builder.
func (fatau *FeedAuditTrailActionUpdate) Where(ps ...predicate.FeedAuditTrailAction) *FeedAuditTrailActionUpdate {
	fatau.mutation.Where(ps...)
	return fatau
}

// SetAction sets the "action" field.
func (fatau *FeedAuditTrailActionUpdate) SetAction(s string) *FeedAuditTrailActionUpdate {
	fatau.mutation.SetAction(s)
	return fatau
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (fatau *FeedAuditTrailActionUpdate) SetNillableAction(s *string) *FeedAuditTrailActionUpdate {
	if s != nil {
		fatau.SetAction(*s)
	}
	return fatau
}

// Mutation returns the FeedAuditTrailActionMutation object of the builder.
func (fatau *FeedAuditTrailActionUpdate) Mutation() *FeedAuditTrailActionMutation {
	return fatau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fatau *FeedAuditTrailActionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fatau.sqlSave, fatau.mutation, fatau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fatau *FeedAuditTrailActionUpdate) SaveX(ctx context.Context) int {
	affected, err := fatau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fatau *FeedAuditTrailActionUpdate) Exec(ctx context.Context) error {
	_, err := fatau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fatau *FeedAuditTrailActionUpdate) ExecX(ctx context.Context) {
	if err := fatau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fatau *FeedAuditTrailActionUpdate) check() error {
	if v, ok := fatau.mutation.Action(); ok {
		if err := feedaudittrailaction.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "FeedAuditTrailAction.action": %w`, err)}
		}
	}
	return nil
}

func (fatau *FeedAuditTrailActionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fatau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(feedaudittrailaction.Table, feedaudittrailaction.Columns, sqlgraph.NewFieldSpec(feedaudittrailaction.FieldID, field.TypeInt))
	if ps := fatau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fatau.mutation.Action(); ok {
		_spec.SetField(feedaudittrailaction.FieldAction, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fatau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedaudittrailaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fatau.mutation.done = true
	return n, nil
}

// FeedAuditTrailActionUpdateOne is the builder for updating a single FeedAuditTrailAction entity.
type FeedAuditTrailActionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeedAuditTrailActionMutation
}

// SetAction sets the "action" field.
func (fatauo *FeedAuditTrailActionUpdateOne) SetAction(s string) *FeedAuditTrailActionUpdateOne {
	fatauo.mutation.SetAction(s)
	return fatauo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (fatauo *FeedAuditTrailActionUpdateOne) SetNillableAction(s *string) *FeedAuditTrailActionUpdateOne {
	if s != nil {
		fatauo.SetAction(*s)
	}
	return fatauo
}

// Mutation returns the FeedAuditTrailActionMutation object of the builder.
func (fatauo *FeedAuditTrailActionUpdateOne) Mutation() *FeedAuditTrailActionMutation {
	return fatauo.mutation
}

// Where appends a list predicates to the FeedAuditTrailActionUpdate builder.
func (fatauo *FeedAuditTrailActionUpdateOne) Where(ps ...predicate.FeedAuditTrailAction) *FeedAuditTrailActionUpdateOne {
	fatauo.mutation.Where(ps...)
	return fatauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fatauo *FeedAuditTrailActionUpdateOne) Select(field string, fields ...string) *FeedAuditTrailActionUpdateOne {
	fatauo.fields = append([]string{field}, fields...)
	return fatauo
}

// Save executes the query and returns the updated FeedAuditTrailAction entity.
func (fatauo *FeedAuditTrailActionUpdateOne) Save(ctx context.Context) (*FeedAuditTrailAction, error) {
	return withHooks(ctx, fatauo.sqlSave, fatauo.mutation, fatauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fatauo *FeedAuditTrailActionUpdateOne) SaveX(ctx context.Context) *FeedAuditTrailAction {
	node, err := fatauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fatauo *FeedAuditTrailActionUpdateOne) Exec(ctx context.Context) error {
	_, err := fatauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fatauo *FeedAuditTrailActionUpdateOne) ExecX(ctx context.Context) {
	if err := fatauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fatauo *FeedAuditTrailActionUpdateOne) check() error {
	if v, ok := fatauo.mutation.Action(); ok {
		if err := feedaudittrailaction.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "FeedAuditTrailAction.action": %w`, err)}
		}
	}
	return nil
}

func (fatauo *FeedAuditTrailActionUpdateOne) sqlSave(ctx context.Context) (_node *FeedAuditTrailAction, err error) {
	if err := fatauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(feedaudittrailaction.Table, feedaudittrailaction.Columns, sqlgraph.NewFieldSpec(feedaudittrailaction.FieldID, field.TypeInt))
	id, ok := fatauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeedAuditTrailAction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fatauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feedaudittrailaction.FieldID)
		for _, f := range fields {
			if !feedaudittrailaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feedaudittrailaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fatauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fatauo.mutation.Action(); ok {
		_spec.SetField(feedaudittrailaction.FieldAction, field.TypeString, value)
	}
	_node = &FeedAuditTrailAction{config: fatauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fatauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedaudittrailaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fatauo.mutation.done = true
	return _node, nil
}
