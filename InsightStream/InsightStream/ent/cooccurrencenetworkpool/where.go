// Code generated by ent, DO NOT EDIT.

package cooccurrencenetworkpool

import (
	"insightstream/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldLTE(FieldID, id))
}

// SiteURL applies equality check predicate on the "site_url" field. It's identical to SiteURLEQ.
func SiteURL(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldEQ(FieldSiteURL, v))
}

// Titles applies equality check predicate on the "titles" field. It's identical to TitlesEQ.
func Titles(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldEQ(FieldTitles, v))
}

// SiteURLEQ applies the EQ predicate on the "site_url" field.
func SiteURLEQ(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldEQ(FieldSiteURL, v))
}

// SiteURLNEQ applies the NEQ predicate on the "site_url" field.
func SiteURLNEQ(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldNEQ(FieldSiteURL, v))
}

// SiteURLIn applies the In predicate on the "site_url" field.
func SiteURLIn(vs ...string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldIn(FieldSiteURL, vs...))
}

// SiteURLNotIn applies the NotIn predicate on the "site_url" field.
func SiteURLNotIn(vs ...string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldNotIn(FieldSiteURL, vs...))
}

// SiteURLGT applies the GT predicate on the "site_url" field.
func SiteURLGT(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldGT(FieldSiteURL, v))
}

// SiteURLGTE applies the GTE predicate on the "site_url" field.
func SiteURLGTE(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldGTE(FieldSiteURL, v))
}

// SiteURLLT applies the LT predicate on the "site_url" field.
func SiteURLLT(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldLT(FieldSiteURL, v))
}

// SiteURLLTE applies the LTE predicate on the "site_url" field.
func SiteURLLTE(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldLTE(FieldSiteURL, v))
}

// SiteURLContains applies the Contains predicate on the "site_url" field.
func SiteURLContains(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldContains(FieldSiteURL, v))
}

// SiteURLHasPrefix applies the HasPrefix predicate on the "site_url" field.
func SiteURLHasPrefix(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldHasPrefix(FieldSiteURL, v))
}

// SiteURLHasSuffix applies the HasSuffix predicate on the "site_url" field.
func SiteURLHasSuffix(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldHasSuffix(FieldSiteURL, v))
}

// SiteURLEqualFold applies the EqualFold predicate on the "site_url" field.
func SiteURLEqualFold(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldEqualFold(FieldSiteURL, v))
}

// SiteURLContainsFold applies the ContainsFold predicate on the "site_url" field.
func SiteURLContainsFold(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldContainsFold(FieldSiteURL, v))
}

// TitlesEQ applies the EQ predicate on the "titles" field.
func TitlesEQ(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldEQ(FieldTitles, v))
}

// TitlesNEQ applies the NEQ predicate on the "titles" field.
func TitlesNEQ(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldNEQ(FieldTitles, v))
}

// TitlesIn applies the In predicate on the "titles" field.
func TitlesIn(vs ...string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldIn(FieldTitles, vs...))
}

// TitlesNotIn applies the NotIn predicate on the "titles" field.
func TitlesNotIn(vs ...string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldNotIn(FieldTitles, vs...))
}

// TitlesGT applies the GT predicate on the "titles" field.
func TitlesGT(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldGT(FieldTitles, v))
}

// TitlesGTE applies the GTE predicate on the "titles" field.
func TitlesGTE(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldGTE(FieldTitles, v))
}

// TitlesLT applies the LT predicate on the "titles" field.
func TitlesLT(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldLT(FieldTitles, v))
}

// TitlesLTE applies the LTE predicate on the "titles" field.
func TitlesLTE(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldLTE(FieldTitles, v))
}

// TitlesContains applies the Contains predicate on the "titles" field.
func TitlesContains(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldContains(FieldTitles, v))
}

// TitlesHasPrefix applies the HasPrefix predicate on the "titles" field.
func TitlesHasPrefix(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldHasPrefix(FieldTitles, v))
}

// TitlesHasSuffix applies the HasSuffix predicate on the "titles" field.
func TitlesHasSuffix(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldHasSuffix(FieldTitles, v))
}

// TitlesEqualFold applies the EqualFold predicate on the "titles" field.
func TitlesEqualFold(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldEqualFold(FieldTitles, v))
}

// TitlesContainsFold applies the ContainsFold predicate on the "titles" field.
func TitlesContainsFold(v string) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(sql.FieldContainsFold(FieldTitles, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CooccurrenceNetworkPool) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CooccurrenceNetworkPool) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CooccurrenceNetworkPool) predicate.CooccurrenceNetworkPool {
	return predicate.CooccurrenceNetworkPool(func(s *sql.Selector) {
		p(s.Not())
	})
}
